
/* 
    Copyright (c) 2007-2013 William Andrew Burnson.
    Copyright (c) 2013-2018 Nicolas Danet.
    
*/

/* < http://opensource.org/licenses/BSD-2-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

#ifndef BELLE_CORE_PAINTER_HPP
#define BELLE_CORE_PAINTER_HPP

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace belle {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Painter {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    Painter()
    {
    }
    
    virtual ~Painter()
    {
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

#if PRIM_CPP11

public:
    Painter (const Painter&) = default;
    Painter (Painter&&) = default;
    Painter& operator = (const Painter&) = default;
    Painter& operator = (Painter&&) = default;

#endif

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

/* Note that all measures are expressed in points. */

public:
    void paint (Paintable& toPaint)
    {
        if (toPaint.start (*this) == true) { performPaint (toPaint); toPaint.end (*this); }
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

public:
    virtual bool originIsTopLeft() const = 0;       /* Assume bottom left otherwise. */
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

public:
    virtual void setState (const Raster& state) = 0;
    virtual void pushAffine (const Affine& affine) = 0;
    virtual void popAffine (int n) = 0;
    virtual void draw (const Path& path) = 0;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
public:
    virtual void performPaint (Paintable& toPaint) = 0;
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Pageable : public Painter {                   /* No virtual inheritance. */

public:
    virtual Points getPageSize() = 0;
    virtual void   setActivePage (int n) = 0;
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Scrollable : public Painter {                 /* No virtual inheritance. */

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace belle

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
#endif // BELLE_CORE_PAINTER_HPP
