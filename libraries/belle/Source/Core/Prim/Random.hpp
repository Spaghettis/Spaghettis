
/* 
    Copyright 2007-2013 William Andrew Burnson. All rights reserved.

    File modified by Nicolas Danet.
    
*/

/* < http://opensource.org/licenses/BSD-2-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

#ifndef PRIM_RANDOM_HPP
#define PRIM_RANDOM_HPP

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace prim {

/* < http://www.eng.tau.ac.il/~yash/infosec-seminar/2007/Random_Bit_Generator.pdf > */
/* < http://www.cse.yorku.ca/~oz/hash.html > */
/* < https://sphinxsearch.googlecode.com/svn/trunk/src/sphinxstd.cpp > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Random {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

/* Please note that this PRNG has NOT been intensively tested. */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

/* Rely on default copy operations. */

public:
    Random (const String& s)
    {
        String t;
        
        #if PRIM_WINDOWS
        t << _getpid();
        #else
        t << getpid();
        #endif 
        t << s;
        t << std::time (nullptr);
        
        uint32 seed = 5381;
        for (int i = 0; i < t.length(); ++i) { seed = ((seed << 5) + seed) + t[i]; }
        for (int i = 0; i < 5; ++i) { seed *= 29943829; seed -= 1; history_[i] = seed; }
        for (int i = 0; i < (static_cast < int > (std::clock()) % 101) + 12; ++i) { next(); }
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

#if PRIM_CPP11

public:
    Random (const Random&) = default;
    Random (Random&&) = default;
    Random& operator = (const Random&) = default;
    Random& operator = (Random&&) = default;

#endif

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    String nextID (int n = 32)
    {
        const char hex[] = "0123456789abcdef";
        
        String s;
        
        while (s.length() < Math::max (n, 0)) {
        //
        uint32 v = next();
        do {
        s << hex[static_cast < size_t > (v & 15)];
        v >>= 4;
        } while ((v != 0) && (s.length() < n));
        //
        }
        
        return s;
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    double nextDouble()
    {
        return (next() * (1.0 / 4294967296.0));
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    uint32 next()
    {
        uint64 sum = 2111111111ULL * static_cast < uint64 > (history_[3]);
        sum += 1492ULL * static_cast < uint64 > (history_[2]);
        sum += 1776ULL * static_cast < uint64 > (history_[1]);
        sum += 5115ULL * static_cast < uint64 > (history_[0]);
        sum += static_cast < uint64 > (history_[4]);

        history_[3] = history_[2];
        history_[2] = history_[1];
        history_[1] = history_[0];
        history_[4] = static_cast < uint32 > (sum >> 32);
        history_[0] = static_cast < uint32 > (sum);

        return history_[0];
    }
    
private:
    uint32 history_[5];

private:
    PRIM_LEAK_DETECTOR (Random)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace prim

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
#endif // PRIM_RANDOM_HPP
