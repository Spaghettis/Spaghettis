
/* 
    Copyright 2007-2013 William Andrew Burnson. All rights reserved.

    File modified by Nicolas Danet.
    
*/

/* < http://opensource.org/licenses/BSD-2-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

#ifndef BELLE_CORE_UNITS_HPP
#define BELLE_CORE_UNITS_HPP

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

/* Handy to store and convert the dimensions of surfaces. */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace belle {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

typedef int Unit;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Units {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

/* < https://en.wikipedia.org/wiki/Point_%28typography%29 > */

public:
    static const Unit Meter = 0;
    static const Unit Millimeter = 1;
    static const Unit Centimeter = 2;
    static const Unit Inch  = 3;
    static const Unit Point = 4;
    static const Unit Pixel = 5;

private:
    static double PPI;
    
public:
    static void setPixelsPerInch (double ppi)
    {
        Units::PPI = ppi;
    }
    
    static Affine pointToPixel()
    {
        return Affine::scale (Vector (Units::PPI / 72.0, Units::PPI / 72.0));
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

public:
    static double getConversionFactor (Unit unit)            /* Conversion ratio to the SI unit. */
    {
        switch (unit) {
            case Meter      : return 1.0;
            case Millimeter : return 1.0 / 1000.0;
            case Centimeter : return 1.0 / 100.0;
            case Inch       : return 25.4 / 1000.0;
            case Point      : return 25.4 / 1000.0 / 72.0;
            case Pixel      : return 25.4 / 1000.0 / PPI;
        }
        
        return 1.0;
    }
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

template < Unit T > class Measurement : public Vector {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    Measurement() 
    {
    }
    
    Measurement (double x, double y) : Vector (x, y)
    {
        PRIM_ASSERT (getX() >= 0.0);
        PRIM_ASSERT (getY() >= 0.0);
    }
    
    template < Unit F > Measurement (const Measurement < F > & m)
    {
        double multiplier = Units::getConversionFactor (F) / Units::getConversionFactor (T);

        getX() = m.getX() * multiplier;
        getY() = m.getY() * multiplier;
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

#if PRIM_CPP11

public:
    Measurement (const Measurement < T > &) = default;
    Measurement (Measurement < T > &&) = default;
    Measurement < T > & operator = (const Measurement < T > &) = default;
    Measurement < T > & operator = (Measurement < T > &&) = default;

#endif

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

typedef Measurement < Units::Meter > Meters;
typedef Measurement < Units::Millimeter > Millimeters;
typedef Measurement < Units::Centimeter > Centimeters;
typedef Measurement < Units::Inch > Inches;
typedef Measurement < Units::Point > Points;
typedef Measurement < Units::Pixel > Pixels;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

/* < https://en.wikipedia.org/wiki/ISO_216 > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Paper {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    static Inches landscape (Inches size)
    {
        return Inches (Math::max (size.getX(), size.getY()), Math::min (size.getX(), size.getY()));
    }
    
    static Inches portrait (Inches size)
    {
        return Inches (Math::min (size.getX(), size.getY()), Math::max (size.getX(), size.getY()));
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    static bool isSmallerThan (const Inches& a, const Inches& b)
    {
        return (a.getX() < b.getX()) && (a.getY() < b.getY());
    }
    
    static bool isGreaterThan (const Inches& a, const Inches& b)
    {
        return (a.getX() > b.getX()) && (a.getY() > b.getY());
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    static bool isSmallerOrEqualThan (const Inches& a, const Inches& b)
    {
        return (a.getX() <= b.getX()) && (a.getY() <= b.getY());
    }
    
    static bool isGreaterOrEqualThan (const Inches& a, const Inches& b)
    {
        return (a.getX() >= b.getX()) && (a.getY() >= b.getY());
    }
    
public:
    static const Inches Letter;
    static const Inches Legal;
    
    static const Millimeters A2;
    static const Millimeters A3;
    static const Millimeters A4;
    static const Millimeters A5;
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

#ifdef BELLE_COMPILE_INLINE

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

double Units::PPI = 72.0;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

const Inches Paper::Letter  (8.5, 11.0);
const Inches Paper::Legal   (8.5, 14.0);

const Millimeters Paper::A2 (420.0, 594.0);
const Millimeters Paper::A3 (297.0, 420.0);
const Millimeters Paper::A4 (210.0, 297.0);
const Millimeters Paper::A5 (148.0, 210.0);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

#endif // BELLE_COMPILE_INLINE

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace belle

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
#endif // BELLE_CORE_UNITS_HPP
