#N canvas 386 130 752 640 12;
#X obj 24 216 list append;
#X obj 24 240 list prepend;
#X obj 24 288 list trim;
#X obj 24 264 list split;
#X text 144 216 - append the second list to the first;
#X text 144 240 - prepend the second list to the first;
#X text 144 264 - split a list in two;
#X text 144 288 - trim the "list" selector off;
#N canvas 186 284 602 409 trim 0;
#X msg 159 239 1 2 3;
#X msg 159 190 list cis boom bah;
#X msg 160 265 bang;
#X msg 159 163 walk the dog;
#X obj 134 341 list trim;
#X obj 134 363 print trim;
#X msg 160 287 1 x y;
#X msg 159 313 x 1 y;
#X text 29 19 trim - convert list to message \, using first item as selector;
#X msg 159 213 55;
#X text 27 55 The "list trim" object inputs lists (or makes lists out of incoming non-list messages) and outputs a message whose selector is the first item of the list \, and whose arguments \, if any \, are the remainder of the list. If the list has no items \, or if its first item is numeric \, the selector is "list" (which might print out as list \, float \, or bang.);
#X connect 0 0 4 0;
#X connect 1 0 4 0;
#X connect 2 0 4 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 6 0 4 0;
#X connect 7 0 4 0;
#X connect 9 0 4 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 480 288 pd trim;
#X text 480 192 details:;
#X text 480 168 click for;
#N canvas 100 190 608 420 append 0;
#X obj 17 324 list append 1 2;
#X floatatom 17 154 5 0 0 0 - - -;
#X f 5;
#X msg 17 129 1 2 3;
#X msg 17 82 list cis boom bah;
#X msg 17 179 bang;
#X msg 176 294 bang;
#X obj 17 353 print append;
#X msg 17 39 walk the dog;
#X msg 176 244 list x y z;
#X msg 175 218 go dog go;
#X msg 174 268 4 5 6 and 7;
#X text 138 37 non-list message converted to list;
#X text 182 77 list starting with symbol;
#X text 181 96 (needs explicit "list" selector);
#X text 69 152 number is one-element list;
#X text 72 129 numeric list;
#X text 67 181 bang is zero-element list;
#X text 270 215 same for right inlet...;
#X text 286 267 (note: only the first item;
#X text 289 286 need be a number to make this;
#X text 289 304 a list.);
#X text 170 325 <- creation args initialize the list to append;
#X text 20 6 Append - append (concatenate) the second list to the first;
#X connect 0 0 6 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 1;
#X connect 7 0 0 0;
#X connect 8 0 0 1;
#X connect 9 0 0 1;
#X connect 10 0 0 1;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 480 216 pd append;
#N canvas 390 321 667 561 split 0;
#X msg 103 328 1 2 3;
#X msg 79 231 list cis boom bah;
#X msg 99 263 bang;
#X obj 79 421 list split 2;
#X floatatom 182 396 3 0 5 0 - - -;
#X f 3;
#X obj 79 469 print split1;
#X obj 198 470 print split2;
#X msg 79 204 walk the dog;
#X msg 102 306 1 2;
#X msg 100 285 1;
#X msg 103 349 1 2 3 4;
#X msg 103 372 1 2 so are you;
#X obj 320 470 print split3;
#X text 76 488 first n;
#X text 195 489 rest of list;
#X text 317 489 shorter than n;
#X text 218 394 new split point;
#X text 49 25 Split - cut a list into smaller ones;
#X text 210 419 <-- creation arg inits split point;
#X text 201 202 non-list message converted to list;
#X text 245 231 list with three symbols;
#X text 139 288 list with one number;
#X text 177 310 ... etc;
#X text 241 370 <- if the first item is a number \, it's a list.;
#X text 142 262 list with no items;
#X text 48 61 The "list split" object takes lists and outputs the first "n" items (left outlet) and the remaining ones (middle outlet). The two outputs appear in the usual right-to-left order. In case there are fewer than "n" items in the list \, it is output (in its entirety) from the third outlet instead. The creation argument or the inlet sets the split point.;
#X connect 0 0 3 0;
#X connect 1 0 3 0;
#X connect 2 0 3 0;
#X connect 3 0 5 0;
#X connect 3 1 6 0;
#X connect 3 2 12 0;
#X connect 4 0 3 1;
#X connect 7 0 3 0;
#X connect 8 0 3 0;
#X connect 9 0 3 0;
#X connect 10 0 3 0;
#X connect 11 0 3 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 480 264 pd split;
#N canvas 0 50 640 478 prepend 0;
#X floatatom 17 154 5 0 0 0 - - -;
#X f 5;
#X msg 17 129 1 2 3;
#X msg 17 82 list cis boom bah;
#X msg 17 179 bang;
#X msg 176 294 bang;
#X obj 17 353 print append;
#X msg 17 39 walk the dog;
#X msg 176 244 list x y z;
#X msg 175 218 go dog go;
#X msg 174 268 4 5 6 and 7;
#X text 138 37 non-list message converted to list;
#X text 182 77 list starting with symbol;
#X text 181 96 (needs explicit "list" selector);
#X text 69 152 number is one-element list;
#X text 72 129 numeric list;
#X text 67 181 bang is zero-element list;
#X text 270 215 same for right inlet...;
#X text 286 267 (note: only the first item;
#X text 289 286 need be a number to make this;
#X text 289 304 a list.);
#X text 20 6 Prepend - prepend the second list to the first;
#X text 171 326 <- creation args initialize the list to prepend;
#X obj 17 324 list prepend 1 2;
#X connect 0 0 22 0;
#X connect 1 0 22 0;
#X connect 2 0 22 0;
#X connect 3 0 22 0;
#X connect 4 0 22 1;
#X connect 6 0 22 0;
#X connect 7 0 22 1;
#X connect 8 0 22 1;
#X connect 9 0 22 1;
#X connect 22 0 5 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 480 240 pd prepend;
#X text 144 312 - output number of items in list;
#N canvas 187 106 576 365 length 0;
#X msg 126 183 1 2 3;
#X msg 126 134 list cis boom bah;
#X msg 127 209 bang;
#X msg 126 107 walk the dog;
#X msg 127 231 1 x y;
#X msg 126 257 x 1 y;
#X msg 126 157 55;
#X obj 101 285 list length;
#X floatatom 101 311 5 0 0 0 - - -;
#X f 5;
#X text 29 18 length - number of items in list;
#X text 27 55 The "list length" object outputs the number of arguments in a list or other message.;
#X connect 0 0 7 0;
#X connect 1 0 7 0;
#X connect 2 0 7 0;
#X connect 3 0 7 0;
#X connect 4 0 7 0;
#X connect 5 0 7 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 480 312 pd length;
#X obj 24 312 list length;
#X text 24 180 The list object's first argument sets its function:;
#X obj 24 336 list fromsymbol;
#X obj 24 360 list tosymbol;
#X text 156 348 - convert symbols to/from numeric characters;
#X f 25;
#N canvas 612 89 552 344 from/to 0;
#X symbolatom 64 254 10 0 0 0 - - -;
#X f 10;
#X obj 64 277 list fromsymbol;
#X text 83 9 fromsymbol and tosymbol - symbols to and from lists of numeric character codes;
#X f 41;
#X msg 230 232 115 101 118 101 110 116 101 101 110;
#X obj 229 260 list tosymbol;
#X obj 64 301 print from-symbol;
#X symbolatom 229 286 10 0 0 0 - - -;
#X f 10;
#X msg 64 228 symbol seventeen;
#X text 43 162 Neither of these objects promote non-list messages to lists (that would make little sense in this context).;
#X text 25 66 These allow you to do string manipulations (such as scanning a filename for '/' characters). They convert a list of numbers (which might be ASCII or might be unicode if \, for example \, they represent a filename on a non-ASCII machine) to or from a symbol.;
#X f 63;
#X connect 0 0 1 0;
#X connect 1 0 5 0;
#X connect 3 0 4 0;
#X connect 4 0 6 0;
#X connect 7 0 0 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 480 360 pd from/to;
#X coords 0 0 1 1 250 175 0 0 0;
