#N struct 1009-template float x float y array z 1009-element;
#N struct 1009-element float x float y float w;
#N struct 1004-template float x float y array z 1004-element;
#N struct 1004-element float x float y float w;
#N canvas 537 138 693 572 12;
#X obj 144 528 list;
#X obj 96 528 text;
#X obj 36 108 array size;
#N canvas 590 301 564 277 size 0;
#X floatatom 60 60 5 1 100 0 - - -;
#X f 5;
#X obj 36 228 print;
#X obj 36 24 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 36 192 array size \$0-foo;
#X msg 216 108 symbol \$0-bar;
#X msg 216 144 symbol \$0-foo;
#X text 348 108 Set the array bound.;
#X text 72 24 Get the size.;
#X f 13;
#X text 132 60 Change the size.;
#X connect 0 0 3 0;
#X connect 2 0 3 0;
#X connect 3 0 1 0;
#X connect 4 0 3 1;
#X connect 5 0 3 1;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 360 pd size;
#X obj 36 132 array sum;
#X obj 36 252 array quantile;
#X obj 36 156 array get;
#X obj 36 180 array set;
#N canvas 219 329 602 326 set 0;
#X msg 36 24 0.1 0.2 0.3 0.4 0.3 0.2 0.1;
#X floatatom 132 72 5 0 0 0 - - -;
#X f 5;
#X obj 36 132 array set \$0-foo;
#X f 17;
#X text 216 72 Onset to start writing.;
#X msg 204 228 symbol \$0-bar;
#X obj 36 276 array set \$0-foo 4;
#X msg 36 192 0.5 -0.5 1 -1;
#X text 216 276 Optional argument initializes the onset.;
#X connect 0 0 2 0;
#X connect 1 0 2 1;
#X connect 4 0 5 2;
#X connect 6 0 5 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 384 pd set;
#X obj 36 276 array random;
#X obj 36 204 array max;
#X obj 36 228 array min;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 array;
#X text 12 528 See also:;
#X text 192 108 Get or change size.;
#X text 192 132 Sum all or a range of elements.;
#X text 192 156 Get contents as a list.;
#X text 192 180 Set contents from a list.;
#X text 192 252 Get a quantile.;
#X text 192 204 Find highest value.;
#X text 192 228 Find lowest value.;
#X text 192 276 Probabilized quantile.;
#X text 12 72 The first argument sets its function.;
#N canvas 0 22 500 350 \$0-foo 0;
#X array \$0-foo 8 float 1;
#A 0 0.680554 -0.222221 0.694444 0.555556 -0.208333 0.208332 0.124999 0.680553;
#X coords 0 1 7 -1 218 144 1 0 0;
#X restore 444 396 graph \$0-foo;
#N canvas 0 22 500 350 \$0-bar 0;
#X array \$0-bar 8 float 1;
#A 0 -0.222222 0.555556 -0.0416635 -0.638883 0.402775 -0.569439 -0.652772 0;
#X coords 0 1 7 -1 218 144 1 0 0;
#X restore 444 216 graph \$0-bar;
#X obj -60 12 freeze;
#X text 12 324 Examples.;
#X f 9;
#N canvas 755 307 665 376 get 0;
#X obj 36 24 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 36 192 print;
#X obj 36 156 array get \$0-foo;
#X f 16;
#X floatatom 72 24 5 0 0 1 - - -;
#X f 5;
#X floatatom 120 120 5 0 0 1 - - -;
#X f 5;
#X msg 96 72 0 -1;
#X obj 36 324 print;
#X text 156 72 Get all.;
#X obj 36 240 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X obj 36 288 array get \$0-foo 1 2;
#X msg 216 240 symbol \$0-bar;
#X text 132 24 Onset to start reading.;
#X text 180 120 Number of points to fetch.;
#X text 228 288 Optional arguments initialize onset and length.;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X connect 3 0 2 0;
#X connect 4 0 2 1;
#X connect 5 0 2 0;
#X connect 8 0 9 0;
#X connect 9 0 6 0;
#X connect 10 0 9 2;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 408 pd get;
#N canvas 392 140 659 524 math 0;
#X obj 36 144 array sum \$0-foo;
#X f 17;
#X obj 60 108 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X msg 36 72 0 -1;
#X msg 36 48 2 3;
#X text 108 48 Sum elements '2' '3' and '4'.;
#X obj 60 324 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X text 108 72 Sum all elements from '0'.;
#X obj 36 180 print;
#X obj 36 360 array max \$0-foo;
#X f 17;
#X obj 36 468 print;
#X msg 36 264 2 4;
#X msg 36 288 4 -1;
#X msg 192 396 index \$1;
#X text 12 12 Get the sum of values from an array.;
#X text 12 228 Get maximum (and minimum) value from an array.;
#X obj 408 324 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 384 468 print;
#X msg 384 264 2 4;
#X msg 384 288 4 -1;
#X msg 540 396 index \$1;
#X obj 384 360 array min \$0-foo;
#X f 17;
#X text 108 264 Range is '2' to '5'.;
#X text 108 288 Range is '4' to the end.;
#X connect 0 0 7 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 5 0 8 0;
#X connect 8 0 9 0;
#X connect 8 1 12 0;
#X connect 10 0 8 0;
#X connect 11 0 8 0;
#X connect 12 0 9 0;
#X connect 15 0 20 0;
#X connect 17 0 20 0;
#X connect 18 0 20 0;
#X connect 19 0 16 0;
#X connect 20 0 16 0;
#X connect 20 1 19 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 432 pd math;
#N canvas 531 108 549 587 quantile 0;
#X floatatom 36 168 5 0 100 0 - - -;
#X f 5;
#X text 12 12 Get the specified quantile of the array.;
#X f 40;
#X obj 36 60 nbx 5 40 0 1 0 0 empty empty empty 0 -7 0 10 #ffffff #000000 #000000 0 100;
#N canvas 0 22 500 350 \$0-rand 0;
#X array \$0-rand 100 float 3;
#A 0 0.306874 0.400056 0.87726 0.724606 0.817589 0.396574 0.685055 0.510492 0.706131 0.820064 0.906622 0.468207 0.534295 0.191072 0.883467 0.472124 0.881071 0.332276 0.068591 0.00985999 0.656012 0.239285 0.831001 0.270083 0.733923 0.993829 0.342543 0.589808 0.468565 0.820282 0.227131 0.682394 0.941841 0.283589 0.998875 0.0790229 0.106514 0.542026 0.981722 0.537717 0.125631 0.651064 0.175086 0.993245 0.244479 0.455062 0.521847 0.892856 0.948104 0.282166 0.939423 0.456233 0.159454 0.796059 0.811831 0.748856 0.973282 0.167819 0.00949004 0.216984 0.255596 0.564837 0.830577 0.0163846 0.177228 0.554528 0.0480849 0.607913 0.905612 0.772313 0.833229 0.489004 0.717098 0.380462 0.119668 0.89448 0.381885 0.861849 0.713488 0.911982 0.937075 0.356262 0.458255 0.81143 0.725598 0.502749 0.178399 0.844687 0.618193 0.936694 0.171151 0.206856 0.633632 0.682214 0.249196 0.906196 0.163593 0.547436 0.882825 0.62245;
#X scalar 1009-template 20 20 \; 0 0 0 \; \;;
#X scalar 1009-template 20 20 \; 0 0 0 \; \;;
#X scalar 1009-template 20 20 \; 0 0 0 \; \;;
#X scalar 1009-template 20 20 \; 0 0 0 \; \;;
#X scalar 1009-template 20 20 \; 0 0 0 \; \;;
#X scalar 1009-template 20 20 \; 0 0 0 \; \;;
#X coords 0 1 100 0 250 175 1 0 0;
#X restore 264 60 graph \$0-rand;
#N canvas 696 436 658 268 init 0;
#X obj 36 180 random;
#X msg 36 144 100;
#X obj 36 36 loadbang;
#X obj 36 216 array set \$0-rand;
#X obj 216 72 uzi 100;
#X f 8;
#X obj 216 216 array set \$0-rand;
#X obj 216 120 t f f;
#X msg 300 120 \; \$0-rand normalize;
#X obj 300 168 expr 0.141*exp(-0.5*((($f1-50)/4)^2));
#X obj 216 36 inlet;
#X connect 0 0 3 0;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X connect 4 1 7 0;
#X connect 4 2 6 0;
#X connect 6 0 8 0;
#X connect 6 1 5 1;
#X connect 8 0 5 0;
#X connect 9 0 4 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 264 pd init;
#X text 12 312 The onset and range arguments available as in getters.;
#X obj 264 348 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X obj 264 384 random;
#X obj 36 348 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X floatatom 36 492 5 0 0 1 - - -;
#X f 5;
#X floatatom 264 420 5 0 0 1 - - -;
#X f 5;
#X floatatom 264 492 5 0 0 1 - - -;
#X f 5;
#X text 12 540 Note that both versions above are equals.;
#X obj 36 120 array quantile \$0-rand;
#X f 23;
#X obj 264 456 array quantile \$0-rand;
#X obj 36 456 array random \$0-rand;
#X f 21;
#X obj 36 228 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X text 120 264 Gaussian distribution.;
#N canvas 205 498 884 74 more 0;
#X text 12 12 For instance with '0.5' \, the index of the median is obtained (i.e half of cumulative weight is below).;
#X f 102;
#X text 12 36 So with '0.25' you get the point where a quarter of the total population is already contained.;
#X f 94;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 120 168 pd more;
#X connect 2 0 13 0;
#X connect 6 0 7 0;
#X connect 7 0 10 0;
#X connect 8 0 15 0;
#X connect 10 0 14 0;
#X connect 13 0 0 0;
#X connect 14 0 11 0;
#X connect 15 0 9 0;
#X connect 16 0 4 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 456 pd quantile;
#N canvas 489 122 680 579 structures 0;
#X obj 36 312 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X floatatom 36 396 5 0 0 0 - - -;
#X f 5;
#N canvas 692 439 527 118 \$0-template 0;
#X obj 36 60 struct \$0-template float x float y array z \$0-element;
#X obj 36 24 plot z 777;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 468 228 pd \$0-template;
#N canvas 596 344 429 113 \$0-element 0;
#X obj 36 24 drawnumber w;
#X obj 36 60 struct \$0-element float x float y float w;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 468 204 pd \$0-element;
#N canvas 454 149 836 575 \$0-data 0;
#X scalar 1004-template 40 100 \; 0 -13.8774 12 \; 100 -22.8587 5 \; 200 7.69965 12 \; 300 -16.9862 15 \; \;;
#X coords 0 0 1 1 400 200 1 0 0;
#X restore 36 48 pd \$0-data;
#N canvas 207 98 460 478 init 0;
#X obj 36 288 append \$0-template x y;
#X obj 228 252 pointer;
#X msg 228 216 traverse \$0-data \, bang;
#X obj 144 432 setsize \$0-template z;
#N canvas 602 214 476 339 points 0;
#X obj 252 168 element \$0-template z;
#X obj 36 288 set \$0-element x y w;
#X f 22;
#X obj 36 24 inlet;
#X obj 36 96 t f b b f;
#X f 12;
#X obj 372 24 inlet;
#X obj 36 204 expr rand()*50-25;
#X obj 36 168 random 20;
#X obj 36 60 uzi;
#X f 5;
#X obj 36 240 * 100;
#X connect 0 0 1 3;
#X connect 2 0 7 0;
#X connect 3 0 8 0;
#X connect 3 1 5 0;
#X connect 3 2 6 0;
#X connect 3 3 0 0;
#X connect 4 0 0 1;
#X connect 5 0 1 1;
#X connect 6 0 1 2;
#X connect 7 2 3 0;
#X connect 8 0 1 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 432 pd points;
#X obj 36 384 t 4 p 4 p;
#X f 23;
#X obj 108 24 loadbang;
#X msg 96 120 \; pd-\$0-data clear;
#X obj 36 180 t 40 100 b;
#X f 22;
#X obj 36 84 t b b;
#X obj 60 336 s \$0-pointer;
#X obj 36 24 inlet;
#X connect 0 0 10 0;
#X connect 0 0 5 0;
#X connect 1 0 0 2;
#X connect 2 0 1 0;
#X connect 5 0 4 0;
#X connect 5 1 4 1;
#X connect 5 2 3 0;
#X connect 5 3 3 1;
#X connect 6 0 9 0;
#X connect 8 0 0 0;
#X connect 8 1 0 1;
#X connect 8 2 2 0;
#X connect 9 0 8 0;
#X connect 9 1 7 0;
#X connect 11 0 9 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 468 180 pd init;
#X text 12 12 The array objects can also reference arrays within structures via pointers.;
#X f 75;
#X text 12 276 Sum of all the 'w' values in the 'z' array.;
#X obj 504 312 r \$0-pointer;
#X obj 468 144 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X obj 36 360 array sum -template \$0-template z -field \$0-element w;
#X f 54;
#X obj 36 444 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X floatatom 36 528 5 0 0 1 - - -;
#X f 5;
#X obj 408 444 r \$0-pointer;
#X obj 36 492 array max -t \$0-template z -f \$0-element w;
#X f 43;
#X connect 0 0 10 0;
#X connect 8 0 10 2;
#X connect 9 0 5 0;
#X connect 10 0 1 0;
#X connect 11 0 14 0;
#X connect 13 0 14 2;
#X connect 14 0 12 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 480 pd structures;
#X coords 0 0 1 1 250 175 0 0 0;
