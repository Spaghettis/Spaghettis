#N struct 1009-template float x float y array z 1009-element;
#N struct 1009-element float x float y float w;
#N canvas 242 155 689 588 12;
#X obj 144 540 list;
#X obj 96 540 text;
#X obj 36 120 array size;
#N canvas 375 278 566 298 size 0;
#X floatatom 60 72 5 1 100 0 - - -;
#X f 5;
#X obj 36 240 print;
#X obj 36 36 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 36 204 array size \$0-foo;
#X msg 216 120 symbol \$0-bar;
#X msg 216 156 symbol \$0-foo;
#X text 348 120 Set the array bound.;
#X text 72 36 Get the size.;
#X f 13;
#X text 132 72 Change the size.;
#X connect 0 0 3 0;
#X connect 2 0 3 0;
#X connect 3 0 1 0;
#X connect 4 0 3 1;
#X connect 5 0 3 1;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 372 pd size;
#X obj 36 144 array sum;
#X obj 36 264 array quantile;
#X obj 36 168 array get;
#X obj 36 192 array set;
#N canvas 330 217 587 438 set 0;
#X msg 36 132 0.1 0.2 0.3 0.4 0.3 0.2 0.1;
#X floatatom 132 180 5 0 0 0 - - -;
#X f 5;
#X text 24 24 Sets values of an array from an incoming list \, starting from a specified onset (0 by default). The size of the array is not changed -- values that would be written past the end of the array are dropped.;
#X f 59;
#X obj 36 240 array set \$0-foo;
#X f 17;
#X text 192 180 Onset to start writing.;
#X msg 204 336 symbol \$0-bar;
#X obj 36 384 array set \$0-foo 4;
#X msg 36 300 0.5 -0.5 1 -1;
#X text 216 384 Optional argument initializes the onset.;
#X connect 0 0 3 0;
#X connect 1 0 3 1;
#X connect 5 0 6 2;
#X connect 7 0 6 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 396 pd set;
#X obj 36 288 array random;
#X obj 36 216 array max;
#X obj 36 240 array min;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 array;
#X text 12 540 See also:;
#X text 192 120 Get or change size.;
#X text 192 144 Sum all or a range of elements.;
#X text 192 168 Get contents as a list.;
#X text 192 192 Set contents from a list.;
#X text 192 264 Get a quantile.;
#X text 192 216 Find highest value.;
#X text 192 240 Find lowest value.;
#X text 192 288 Probabilized quantile.;
#X text 12 72 The first argument sets its function.;
#N canvas 0 22 500 350 \$0-foo 0;
#X array \$0-foo 8 float 1;
#A 0 -0.0694443 -0.222221 0.694444 0.555556 -0.208333 0.208332 0.124999 0.680553;
#X coords 0 1 7 -1 218 144 1 0 0;
#X restore 444 408 graph \$0-foo;
#N canvas 0 22 500 350 \$0-bar 0;
#X array \$0-bar 8 float 1;
#A 0 -0.222222 0.555556 -0.0416635 -0.638883 0.402775 -0.569439 -0.652772 0;
#X coords 0 1 7 -1 218 144 1 0 0;
#X restore 444 228 graph \$0-bar;
#X obj -60 12 freeze;
#X text 12 336 Examples.;
#X f 9;
#N canvas 288 328 660 397 get 0;
#X obj 36 36 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 36 204 print;
#X obj 36 168 array get \$0-foo;
#X f 16;
#X floatatom 72 36 5 0 0 1 - - -;
#X f 5;
#X floatatom 120 132 5 0 0 1 - - -;
#X f 5;
#X msg 96 84 0 -1;
#X obj 36 336 print;
#X text 156 84 Get all.;
#X obj 36 264 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X obj 36 300 array get \$0-foo 1 2;
#X msg 204 264 symbol \$0-bar;
#X text 132 36 Onset to start reading.;
#X text 180 132 Number of points to fetch.;
#X text 228 300 Optional arguments initialize onset and length.;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X connect 3 0 2 0;
#X connect 4 0 2 1;
#X connect 5 0 2 0;
#X connect 8 0 9 0;
#X connect 9 0 6 0;
#X connect 10 0 9 2;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 420 pd get;
#N canvas 566 72 638 603 math 0;
#X obj 48 180 array sum \$0-foo;
#X f 17;
#X obj 48 48 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X msg 120 120 0 -1;
#X msg 96 72 2 3;
#X text 156 72 Sum elements '2' '3' and '4'.;
#X obj 48 300 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X text 192 120 Sum all elements from '0'.;
#X obj 48 228 print;
#X obj 48 420 array max \$0-foo;
#X f 17;
#X obj 48 540 print;
#X msg 96 300 2 4;
#X msg 120 348 4 -1;
#X text 180 348 From '4' on to the end.;
#X f 23;
#X msg 204 456 index \$1;
#X text 144 300 Set the domain ('4' elements from the third included).;
#X f 54;
#X connect 0 0 7 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 5 0 8 0;
#X connect 8 0 9 0;
#X connect 8 1 13 0;
#X connect 10 0 8 0;
#X connect 11 0 8 0;
#X connect 13 0 9 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 444 pd math;
#N canvas 675 54 565 728 quantile 0;
#X floatatom 48 276 5 0 100 0 - - -;
#X f 5;
#X text 24 24 Get the specified quantile of the array.;
#X f 40;
#X text 24 48 For instance with '0.5' \, the index of the median is obtained (i.e half of cumulative weight is below). So with '0.25' you get the point where a quarter of the total population is already contained.;
#X f 61;
#X obj 48 168 nbx 5 40 0 1 0 0 empty empty empty 0 -7 0 10 #ffffff #000000 #000000 0 100;
#N canvas 0 22 500 350 \$0-rand 0;
#X array \$0-rand 100 float 3;
#A 0 0.329043 0.568556 0.971183 0.187166 0.958277 0.242319 0.114985 0.901459 0.22546 0.639273 0.891498 0.324512 0.854023 0.592744 0.235638 0.972143 0.211769 0.114502 0.451371 0.450922 0.65103 0.311349 0.373615 0.309081 0.488342 0.891449 0.976944 0.815348 0.569919 0.582275 0.700591 0.88343 0.117578 0.146552 0.290284 0.8897 0.771913 0.773529 0.88259 0.462624 0.258765 0.60917 0.291722 0.693732 0.48062 0.692481 0.307879 0.448993 0.671101 0.911473 0.226358 0.191676 0.408615 0.0593596 0.634892 0.686937 0.140459 0.14115 0.670409 0.196092 0.562851 0.687185 0.883878 0.914833 0.89263 0.61125 0.531867 0.922374 0.175734 0.697386 0.445328 0.323984 0.244324 0.905401 0.649956 0.451657 0.462832 0.597429 0.0589301 0.379314 0.712898 0.456881 0.899204 0.880343 0.143522 0.200103 0.0287164 0.655122 0.556755 0.276424 0.0564338 0.861228 0.177489 0.173683 0.683204 0.944112 0.250616 0.956358 0.0728208 0.574236;
#X scalar 1009-template 20 20 \; 0 0 0 \; \;;
#X scalar 1009-template 20 20 \; 0 0 0 \; \;;
#X scalar 1009-template 20 20 \; 0 0 0 \; \;;
#X scalar 1009-template 20 20 \; 0 0 0 \; \;;
#X scalar 1009-template 20 20 \; 0 0 0 \; \;;
#X scalar 1009-template 20 20 \; 0 0 0 \; \;;
#X coords 0 1 100 0 250 175 1 0 0;
#X restore 276 156 graph \$0-rand;
#N canvas 696 436 658 268 init 0;
#X obj 36 180 random;
#X msg 36 144 100;
#X obj 36 36 loadbang;
#X obj 36 216 array set \$0-rand;
#X obj 216 72 uzi 100;
#X f 8;
#X obj 216 216 array set \$0-rand;
#X obj 216 120 t f f;
#X msg 300 120 \; \$0-rand normalize;
#X obj 300 168 expr 0.141*exp(-0.5*((($f1-50)/4)^2));
#X obj 216 36 inlet;
#X connect 0 0 3 0;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X connect 4 1 7 0;
#X connect 4 2 6 0;
#X connect 6 0 8 0;
#X connect 6 1 5 1;
#X connect 8 0 5 0;
#X connect 9 0 4 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 48 360 pd init;
#X text 24 408 The onset and range arguments available as in getters.;
#X obj 276 468 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X obj 276 504 random;
#X obj 48 468 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X floatatom 48 612 5 0 0 1 - - -;
#X f 5;
#X floatatom 276 540 5 0 0 1 - - -;
#X f 5;
#X floatatom 276 612 5 0 0 1 - - -;
#X f 5;
#X text 24 672 Note that both versions above are equals.;
#X obj 48 228 array quantile \$0-rand;
#X f 23;
#X obj 276 576 array quantile \$0-rand;
#X obj 48 576 array random \$0-rand;
#X f 21;
#X obj 48 324 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X text 132 360 Gaussian distribution.;
#X connect 3 0 14 0;
#X connect 7 0 8 0;
#X connect 8 0 11 0;
#X connect 9 0 16 0;
#X connect 11 0 15 0;
#X connect 14 0 0 0;
#X connect 15 0 12 0;
#X connect 16 0 10 0;
#X connect 17 0 5 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 468 pd quantile;
#N canvas 512 106 676 518 structures 0;
#X obj 408 372 pointer;
#X obj 36 348 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X floatatom 36 468 5 0 0 0 - - -;
#X f 5;
#N canvas 701 325 505 122 \$0-template 0;
#X obj 24 60 struct \$0-template float x float y array z \$0-element;
#X obj 24 24 plot z 900;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 504 240 pd \$0-template;
#N canvas 596 344 473 129 \$0-element 0;
#X obj 24 36 drawnumber w;
#X obj 24 72 struct \$0-element float x float y float w;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 504 216 pd \$0-element;
#N canvas 454 149 836 575 \$0-data 0;
#X coords 0 0 1 1 400 200 1 0 0;
#X restore 36 60 pd \$0-data;
#N canvas 166 305 455 479 init 0;
#X obj 36 324 append \$0-template x y;
#X obj 228 288 pointer;
#X msg 228 252 traverse \$0-data \, bang;
#X obj 36 72 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X obj 144 420 setsize \$0-template z;
#N canvas 233 215 466 352 points 0;
#X obj 252 180 element \$0-template z;
#X obj 36 72 uzi 4;
#X obj 36 300 set \$0-element x y w;
#X f 22;
#X obj 36 36 inlet;
#X obj 36 252 expr $f1*100;
#X obj 36 108 t f b b f;
#X f 12;
#X obj 372 36 inlet;
#X obj 36 216 expr rand()*50-25;
#X obj 36 180 random 20;
#X connect 0 0 2 3;
#X connect 1 2 5 0;
#X connect 3 0 1 0;
#X connect 4 0 2 0;
#X connect 5 0 4 0;
#X connect 5 1 7 0;
#X connect 5 2 8 0;
#X connect 5 3 0 0;
#X connect 6 0 0 1;
#X connect 7 0 2 1;
#X connect 8 0 2 2;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 420 pd points;
#X obj 36 360 t 4 p 4 p;
#X f 23;
#X obj 36 36 loadbang;
#X msg 96 144 \; pd-\$0-data clear;
#X obj 36 216 t 40 100 b;
#X f 22;
#X obj 36 108 t b b;
#X connect 0 0 6 0;
#X connect 1 0 0 2;
#X connect 2 0 1 0;
#X connect 3 0 10 0;
#X connect 6 0 5 0;
#X connect 6 1 5 1;
#X connect 6 2 4 0;
#X connect 6 3 4 1;
#X connect 7 0 3 0;
#X connect 9 0 0 0;
#X connect 9 1 0 1;
#X connect 9 2 2 0;
#X connect 10 0 9 0;
#X connect 10 1 8 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 504 192 pd init;
#X msg 408 336 traverse \$0-data \, next;
#X f 22;
#X obj 36 420 array sum -t \$0-template z -f \$0-element w;
#X f 43;
#X text 12 12 The array objects can also reference arrays within structures via pointers.;
#X f 77;
#X text 12 288 Sum of all the 'w' values in the 'z' array.;
#X connect 0 0 8 2;
#X connect 1 0 8 0;
#X connect 7 0 0 0;
#X connect 8 0 2 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 492 pd structures;
#X coords 0 0 1 1 250 175 0 0 0;
