#N struct array-help-struct float x float y array z float;
#N struct float float y;
#N struct array-help-struct2 float x float y array z element-struct2;
#N struct element-struct2 float x float y float w;
#N canvas 287 136 689 588 12;
#X obj 144 540 list;
#X obj 96 540 text;
#X obj 36 120 array size;
#N canvas 375 278 566 298 size 0;
#X floatatom 60 72 5 1 100 0 - - -;
#X f 5;
#X obj 36 240 print;
#X obj 36 36 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 36 204 array size \$0-foo;
#X msg 216 120 symbol \$0-bar;
#X msg 216 156 symbol \$0-foo;
#X text 348 120 Set the array bound.;
#X text 72 36 Get the size.;
#X f 13;
#X text 132 72 Change the size.;
#X connect 0 0 3 0;
#X connect 2 0 3 0;
#X connect 3 0 1 0;
#X connect 4 0 3 1;
#X connect 5 0 3 1;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 372 pd size;
#X obj 36 144 array sum;
#X obj 36 264 array quantile;
#X obj 36 168 array get;
#X obj 36 192 array set;
#N canvas 330 217 587 438 set 0;
#X msg 36 132 0.1 0.2 0.3 0.4 0.3 0.2 0.1;
#X floatatom 132 180 5 0 0 0 - - -;
#X f 5;
#X text 24 24 Sets values of an array from an incoming list \, starting from a specified onset (0 by default). The size of the array is not changed -- values that would be written past the end of the array are dropped.;
#X f 59;
#X obj 36 240 array set \$0-foo;
#X f 17;
#X text 192 180 Onset to start writing.;
#X msg 204 336 symbol \$0-bar;
#X obj 36 384 array set \$0-foo 4;
#X msg 36 300 0.5 -0.5 1 -1;
#X text 216 384 Optional argument initializes the onset.;
#X connect 0 0 3 0;
#X connect 1 0 3 1;
#X connect 5 0 6 2;
#X connect 7 0 6 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 396 pd set;
#X obj 36 288 array random;
#X obj 36 216 array max;
#X obj 36 240 array min;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 array;
#X text 12 540 See also:;
#X text 192 120 Get or change size.;
#X text 192 144 Sum all or a range of elements.;
#X text 192 168 Get contents as a list.;
#X text 192 192 Set contents from a list.;
#X text 192 264 Get a quantile.;
#X text 192 216 Find highest value.;
#X text 192 240 Find lowest value.;
#X text 192 288 Probabilized quantile.;
#X text 12 72 The first argument sets its function.;
#N canvas 0 22 500 350 \$0-foo 0;
#X array \$0-foo 8 float 1;
#A 0 -0.0694443 -0.222221 0.694444 0.555556 -0.208333 0.208332 0.124999 0.680553;
#X coords 0 1 7 -1 218 144 1 0 0;
#X restore 444 408 graph \$0-foo;
#N canvas 0 22 500 350 \$0-bar 0;
#X array \$0-bar 8 float 1;
#A 0 -0.222222 0.555556 -0.0416635 -0.638883 0.402775 -0.569439 -0.652772 0;
#X coords 0 1 7 -1 218 144 1 0 0;
#X restore 444 228 graph \$0-bar;
#X obj -60 12 freeze;
#X text 12 336 Examples.;
#X f 9;
#N canvas 288 328 660 397 get 0;
#X obj 36 36 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 36 204 print;
#X obj 36 168 array get \$0-foo;
#X f 16;
#X floatatom 72 36 5 0 0 1 - - -;
#X f 5;
#X floatatom 120 132 5 0 0 1 - - -;
#X f 5;
#X msg 96 84 0 -1;
#X obj 36 336 print;
#X text 156 84 Get all.;
#X obj 36 264 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X obj 36 300 array get \$0-foo 1 2;
#X msg 204 264 symbol \$0-bar;
#X text 132 36 Onset to start reading.;
#X text 180 132 Number of points to fetch.;
#X text 228 300 Optional arguments initialize onset and length.;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X connect 3 0 2 0;
#X connect 4 0 2 1;
#X connect 5 0 2 0;
#X connect 8 0 9 0;
#X connect 9 0 6 0;
#X connect 10 0 9 2;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 420 pd get;
#N canvas 566 72 638 603 math 0;
#X obj 48 180 array sum \$0-foo;
#X f 17;
#X obj 48 48 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X msg 120 120 0 -1;
#X msg 96 72 2 3;
#X text 156 72 Sum elements '2' '3' and '4'.;
#X obj 48 300 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X text 192 120 Sum all elements from '0'.;
#X obj 48 228 print;
#X obj 48 420 array max \$0-foo;
#X f 17;
#X obj 48 540 print;
#X msg 96 300 2 4;
#X msg 120 348 4 -1;
#X text 180 348 From '4' on to the end.;
#X f 23;
#X msg 204 456 index \$1;
#X text 144 300 Set the domain ('4' elements from the third included).;
#X f 54;
#X connect 0 0 7 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 5 0 8 0;
#X connect 8 0 9 0;
#X connect 8 1 13 0;
#X connect 10 0 8 0;
#X connect 11 0 8 0;
#X connect 13 0 9 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 444 pd math;
#N canvas 184 130 816 629 quantile 0;
#X floatatom 75 177 5 0 100 0 - - -;
#X f 5;
#X obj 39 251 array quantile array-help-3;
#X f 14;
#N canvas 0 50 450 250 array-help-3 0;
#X array array-help-3 100 float 3;
#A 0 0 0 0 0 0 0 0 0 0 0 0 0.00715053 0.00715053 0.0285789 0.0500072 0.0714356 0.100007 0.128578 0.164292 0.207148 0.478574 0.628573 0.678572 0.721429 0.717857 0.714286 0.707143 0.7 0.692857 0.685715 0.678572 0.18572 0.164292 0.157149 0.0142931 -0.00713521 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.014293 0.0214357 0.0357213 0.078578 0.142863 0.207148 0.335718 0.407146 0.435717 0.478574 0.514288 0.557144 0.592858 0.642858 0.7 0.692857 0.692857 0.692857 0.692857 0.7 0.696429 0.349997 0.335712 0.321426 0.278569 0.192856 0.149999 0.135714 0.114285 0.0999998 0.0714298 0.0642871 0.0571443 0.0285732 0 0 0 0 0;
#X coords 0 1 99 0 200 140 1 0 0;
#X restore 37 375 graph array-help-3;
#X floatatom 111 198 5 -1 100 0 - - -;
#X f 5;
#X msg 43 524 \; array-help-3 const 0;
#X floatatom 39 131 5 -1 100 0 - - -;
#X f 5;
#X obj 39 152 / 100;
#X floatatom 39 295 5 0 100 0 - - -;
#X f 5;
#X floatatom 368 599 5 0 100 0 - - -;
#X f 5;
#X obj 370 555 array random array-help-3;
#X f 13;
#X obj 370 435 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X floatatom 383 484 5 0 0 0 - - -;
#X f 5;
#X floatatom 420 507 5 0 0 0 - - -;
#X f 5;
#X text 303 358 "array random" makes a pseudo-random numbver from 0 to 1 and outputs its quantile (which will therefore have probabilities proportional to the table's values.);
#X text 394 430 bang to generate a random value;
#X msg 377 456 seed 56;
#X text 445 456 set random seed;
#X text 170 286 - optional number to initialize onset - default 0;
#X text 169 305 - optional number to initialize number of points - default -1;
#X f 61;
#X text 494 569 same creation arguments;
#X text 174 249 creation arguments: either array name or "-s" and optional "-f" flags to refer to an array in a data structure;
#X text 120 174 onset (first index to sum from) \, zero for start of array;
#X text 160 196 number of points or -1 for end of array;
#X text 130 5 "array quantile" outputs the specified quantile of the array - so for instance \, the 0.5 quantile is the median of the array. This generalizes the "array random" function allowing you to use the same source of randomness on several arrays \, for example. Negative numbers in the array are silently replaced by zero. Quantiles outside the range 0-1 output the x values at the two extremes of the array (0 and 99 here).;
#X text 428 481 onset;
#X text 466 505 number of points;
#X text 88 130 quantile (between 0 and 1);
#X msg 149 218 symbol array-help-2;
#X text 313 217 set name or pointer;
#X msg 471 529 symbol array-help-2;
#X text 635 528 set name or pointer;
#X connect 0 0 1 1;
#X connect 1 0 7 0;
#X connect 3 0 1 2;
#X connect 5 0 6 0;
#X connect 6 0 1 0;
#X connect 9 0 8 0;
#X connect 10 0 9 0;
#X connect 11 0 9 0;
#X connect 12 0 9 1;
#X connect 15 0 9 0;
#X connect 27 0 1 3;
#X connect 29 0 9 2;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 468 pd quantile;
#N canvas 624 95 689 679 structures 0;
#X obj 98 247 pointer;
#N canvas 804 396 504 278 array-help-struct 0;
#X scalar array-help-struct 20 20 \; 0 \; 0 \; -1 \; -6 \; -9 \; -10 \; -5 \; -2 \; 8 \; 12 \; 12 \; 12 \; 10 \; 8 \; 6 \; 1 \; \;;
#X obj 88 204 pointer;
#X msg 32 156 20 20;
#X obj 31 231 append array-help-struct x y;
#X msg 88 147 traverse pd-array-help-struct \, bang;
#X f 21;
#X obj 13 83 filledpolygon 0 0 0 0 0 0 10 20 10 20 0 0 0;
#X obj 13 56 struct array-help-struct float x float y array z float;
#X obj 17 114 plot z 500 2 25 5 5;
#X connect 1 0 3 2;
#X connect 2 0 3 0;
#X connect 4 0 1 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 289 159 pd array-help-struct;
#N canvas 990 234 450 300 array-help-data 0;
#X scalar array-help-struct 84 93 \; 0 \; 0 \; -1 \; -6 \; -9 \; -10 \; -5 \; -2 \; 5 \; -7 \; -41 \; -47 \; -45 \; -34 \; -17 \; 8 \; 5 \; 2 \; -2 \; -11 \; -16 \; -26 \; -43 \; 16 \; 24 \; 26 \; 21 \; 20 \; 19 \; 17 \; 16 \; 16 \; 16 \; 16 \; 12 \; \;;
#X text 26 215 We have one datum... right-click to see contents.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 290 189 pd array-help-data;
#X msg 98 190 traverse pd-array-help-data \, next;
#X f 19;
#X obj 61 139 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 61 161 t b b;
#X obj 61 286 array sum -s array-help-struct z;
#X f 19;
#X floatatom 61 327 5 0 0 0 - - -;
#X f 5;
#X text 449 190 <- the array;
#X text 460 161 <- the structure;
#X text 56 21 The array objects can also reference arrays within structures via pointers. The "-s" flag takes two arguments \, specifying the data structure and the field within it that will contain the array. By default the array should be a simple floating point array (use hte template "float" for the array elements) but you can override that using "-f" as shown further down.;
#X obj 115 549 pointer;
#X obj 78 441 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 78 463 t b b;
#X floatatom 78 629 5 0 0 0 - - -;
#X f 5;
#X text 466 518 <- the array;
#N canvas 993 375 447 373 array-help-struct2 0;
#X obj 95 252 pointer;
#X msg 39 204 20 20;
#X obj 13 94 filledpolygon 0 0 0 0 0 0 10 20 10 20 0 0 0;
#X obj 13 56 struct array-help-struct2 float x float y array z element-struct2;
#X msg 95 195 traverse pd-array-help-struct2 \, bang;
#X f 22;
#X obj 38 279 append array-help-struct2 x y;
#X obj 16 120 plot z 500 2 25 5;
#X connect 0 0 5 2;
#X connect 1 0 5 0;
#X connect 4 0 0 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 306 461 pd array-help-struct2;
#N canvas 963 171 477 318 array-help-data2 0;
#X scalar array-help-struct2 80 30 \; -54 200 10 \; 138 -10 3 \; -32 26 0 \; 109 141 8 \; 272 19 0 \; \;;
#X text 31 267 A structure whose array has (x \, y \, w) triples - right-click to see contents.;
#X f 40;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 307 517 pd array-help-data2;
#X msg 115 492 traverse pd-array-help-data2 \, next;
#X f 20;
#X text 484 461 <- main structure;
#X f 30;
#X text 484 486 <- element structure;
#X f 30;
#N canvas 1103 205 413 178 element-struct2 0;
#X obj 13 56 struct element-struct2 float x float y float w;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 306 486 pd element-struct2;
#X obj 78 588 array sum -s array-help-struct2 z -f element-struct2 w;
#X f 33;
#X text 58 366 Using an additional '-f' flag we can specify which field in the array we're referring to. In this example the array has (x \, y \, w) triples (struct element-struct2) and we're asking for the "w" field using the "-f" flag and its two arguments.;
#X text 128 629 sum of all the 'w' values in the array;
#X text 225 267 when "-s" is given this inlet takes a pointer in place of a name.;
#X f 35;
#X connect 0 0 6 2;
#X connect 3 0 0 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 5 1 3 0;
#X connect 6 0 7 0;
#X connect 11 0 22 2;
#X connect 12 0 13 0;
#X connect 13 0 22 0;
#X connect 13 1 18 0;
#X connect 18 0 11 0;
#X connect 22 0 14 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 492 pd structures;
#X coords 0 0 1 1 250 175 0 0 0;
