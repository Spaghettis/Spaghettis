#N canvas 173 119 509 567 12;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 objects;
#N canvas 550 216 542 343 gui 0;
#X text 360 84 comment;
#X floatatom 36 144 5 0 0 1 - - -;
#X f 5;
#N canvas 0 22 500 350 \$0-array 0;
#X array \$0-array 12 float 1;
#A 0 0 -0.165714 0.245715 0.142858 -0.188571 -0.600001 -0.474286 0.691431 0.760002 0 0 0;
#X coords 0 1 11 -1 250 175 1 0 0;
#X restore 264 132 graph \$0-array;
#X msg 444 84 message;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 GUI;
#X obj 192 156 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X obj 192 192 tgl 15 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000 0 1;
#X obj 144 132 vradio 15 1 0 8 empty empty empty 17 7 0 10 #ffffff #000000 #000000 1;
#X obj 144 84 hradio 15 1 0 8 empty empty empty 0 -7 0 10 #ffffff #000000 #000000 1;
#X obj 108 144 vslider 15 128 0 127 0 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000 0 0;
#X obj 108 288 hslider 128 15 0 127 0 0 empty empty empty 0 -7 0 10 #ffffff #000000 #000000 0 0;
#X obj 36 84 nbx 5 40 0 127 0 1 empty empty empty 0 -7 0 10 #ffffff #000000 #000000 6 127;
#X obj 36 180 vu 15 120 empty empty 17 7 0 10 #ffffff #000000 0 0;
#X connect 1 0 13 0;
#X connect 6 0 7 0;
#X connect 9 0 8 0;
#X connect 10 0 11 0;
#X connect 12 0 1 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 108 pd gui;
#X text 12 72 All the objects contained in this distribution.;
#N canvas 609 152 544 256 time 0;
#X obj 36 84 delay;
#X obj 36 108 metro;
#X obj 36 132 line;
#X obj 36 156 timer;
#X obj 36 180 realtime;
#X obj 36 204 pipe;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 time;
#X text 168 84 Send a message after a time delay.;
#X text 168 108 Send a bang periodically.;
#X text 168 132 Generate ramps.;
#X text 168 156 Measures elapsed logical time.;
#X text 168 180 Measures elapsed real time.;
#X text 168 204 Delay line for numbers (or messages).;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 180 pd time;
#N canvas 431 130 464 594 math 0;
#X obj 36 348 mod;
#X obj 36 324 div;
#X obj 36 84 sin;
#X obj 36 108 cos;
#X obj 36 132 tan;
#X obj 36 156 atan;
#X obj 36 180 atan2;
#X obj 36 252 sqrt;
#X obj 36 204 log;
#X obj 36 228 exp;
#X obj 36 444 abs;
#X obj 36 516 random;
#X obj 36 396 max;
#X obj 36 372 min;
#X obj 36 420 clip;
#X obj 36 276 pow;
#X obj 36 300 %;
#X obj 36 468 wrap;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 math;
#X obj 36 540 expr;
#X text 168 84 Sine.;
#X text 168 108 Cosine.;
#X text 168 132 Tangent.;
#X text 168 156 Arctangent.;
#X text 168 228 Exponential.;
#X text 168 204 Logarithm (natural).;
#X text 168 252 Square root.;
#X text 168 276 Power.;
#X text 168 300 Modulo.;
#X text 168 324 Integer division.;
#X text 168 348 Remainder.;
#X text 168 372 Minimum.;
#X text 168 396 Maximum.;
#X text 168 444 Absolute value.;
#X text 168 468 Fractional part.;
#X obj 36 492 int;
#X text 168 492 Integer part.;
#X text 168 516 Pseudorandom number.;
#X text 168 540 Evaluate math expressions.;
#X text 168 420 Force a number into a range.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 252 pd math;
#N canvas 162 226 535 571 midi 0;
#X obj 36 84 notein;
#X obj 36 108 ctlin;
#X obj 36 132 pgmin;
#X obj 36 156 bendin;
#X obj 36 180 touchin;
#X obj 36 204 polytouchin;
#X obj 36 252 midiin;
#X obj 36 228 sysexin;
#X obj 36 276 noteout;
#X obj 36 300 ctlout;
#X obj 36 324 pgmout;
#X obj 36 348 bendout;
#X obj 36 372 touchout;
#X obj 36 396 polytouchout;
#X obj 36 420 midiout;
#X obj 36 444 makenote;
#X obj 36 468 stripnote;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 MIDI;
#X text 168 108 Control change in.;
#X text 168 132 Program change in.;
#X text 168 156 Pitch bend in.;
#X text 168 180 Aftertouch in.;
#X text 168 204 Polypressure in.;
#X text 168 252 Incoming raw bytes.;
#X text 168 228 System exclusive in.;
#X text 168 276 Notes out.;
#X text 168 300 Control change out.;
#X text 168 324 Program change out.;
#X text 168 348 Pitch bend out.;
#X text 168 372 Aftertouch out.;
#X text 168 396 Polypressure out.;
#X text 168 420 Broadcast raw bytes.;
#X text 168 444 Send note-on and schedule note-off.;
#X text 168 468 Strip note-off.;
#X text 168 84 Notes in.;
#X obj 36 492 bag;
#X obj 36 516 poly;
#X text 168 492 Maintain a collection of numbers.;
#X text 168 516 Allocate polyphonic voices.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 276 pd midi;
#N canvas 431 249 509 182 osc 0;
#X obj 36 84 oscparse;
#X obj 36 108 oscformat;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 Open Sound Control;
#X text 168 84 Parse OSC packets into messages.;
#X text 168 108 Convert message to OSC packets.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 300 pd osc;
#N canvas 428 277 583 244 array 0;
#X obj 36 84 tabread;
#X obj 36 108 tabread4;
#X obj 36 132 tabwrite;
#X obj 36 180 soundfiler;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 array;
#X text 168 84 Read numbers from an array.;
#X text 168 108 Alternate with 4-point interpolation.;
#X text 168 132 Write numbers to an array.;
#X obj 36 156 array;
#X text 168 156 Manipulate arrays.;
#X text 168 180 Read and write soundfiles from and to arrays.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 324 pd array;
#N canvas 0 22 596 488 math~ 0;
#X text 168 1968 - arithmetic on audio signals;
#X text 144 2004 - maximum or minimum of 2 inputs;
#X obj 48 2028 clip~;
#X text 144 2028 - constrict signal to lie between two bounds;
#X obj 48 2064 q8_rsqrt~;
#X text 144 2064 - cheap reciprocal square root (beware -- 8 bits!);
#X obj 48 2088 q8_sqrt~;
#X text 144 2088 - cheap square root (beware -- 8 bits!);
#X obj 48 2136 wrap~;
#X obj 48 2160 fft~;
#X text 144 2160 - complex forward discrete Fourier transform;
#X obj 48 2184 ifft~;
#X text 144 2184 - complex inverse discrete Fourier transform;
#X obj 48 2208 rfft~;
#X text 144 2208 - real forward discrete Fourier transform;
#X obj 48 2232 rifft~;
#X text 144 2232 - real inverse discrete Fourier transform;
#X obj 48 2292 framp~;
#X text 144 2292 - output a ramp for each block;
#X obj 48 2316 mtof~;
#X obj 96 2316 ftom~;
#X obj 144 2316 rmstodb~;
#X obj 228 2316 dbtorms~;
#X text 300 2316 - acoustic conversions;
#X obj 84 2004 min~;
#X obj 48 2004 max~;
#X obj 48 1968 +~;
#X obj 72 1968 -~;
#X obj 108 1968 *~;
#X obj 144 1968 /~;
#X text 144 2136 - wraparound (fractional part);
#X obj 48 2268 pow~;
#X obj 84 2268 log~;
#X obj 132 2268 exp~;
#X text 228 2268 - math;
#X obj 180 2268 abs~;
#X obj 48 2100 sqrt~;
#X text 144 2112 - proper square root;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 516 pd math~;
#N canvas 0 22 542 509 general~ 0;
#X obj 48 2376 dac~;
#X text 144 2376 - audio output;
#X obj 48 2400 adc~;
#X text 144 2400 - audio input;
#X obj 48 2424 sig~;
#X text 144 2424 - convert numbers to audio signals;
#X obj 48 2448 line~;
#X text 144 2448 - generate audio ramps;
#X obj 48 2472 vline~;
#X text 144 2472 - deluxe line~;
#X obj 48 2520 snapshot~;
#X text 144 2520 - sample a signal (convert it back to a number);
#X obj 48 2544 vsnapshot~;
#X text 144 2544 - deluxe snapshot~;
#X obj 48 2568 bang~;
#X text 144 2568 - send a bang message after each DSP block;
#X obj 48 2616 send~;
#X text 144 2616 - nonlocal signal connection with fanout;
#X obj 48 2640 receive~;
#X text 144 2640 - get signal from send~;
#X obj 48 2664 throw~;
#X text 144 2664 - add to a summing bus;
#X obj 48 2688 catch~;
#X text 144 2688 - define and read a summing bus;
#X obj 48 2712 block~;
#X text 144 2712 - specify block size and overlap;
#X obj 48 2736 switch~;
#X text 144 2736 - switch DSP computation on and off;
#X obj 48 2760 readsf~;
#X text 144 2760 - soundfile playback from disk;
#X obj 48 2784 writesf~;
#X text 144 2784 - record sound to disk;
#X obj 48 2496 threshold~;
#X text 144 2496 - detect signal thresholds;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 420 pd general~;
#N canvas 458 29 828 770 oscillators~ 0;
#X obj 36 2844 phasor~;
#X text 144 2844 - sawtooth oscillator;
#X obj 36 2868 cos~;
#X text 144 2868 - cosine;
#X obj 36 2892 osc~;
#X text 144 2892 - cosine oscillator;
#X obj 36 2916 tabwrite~;
#X text 144 2916 - write to a table;
#X obj 36 2940 tabplay~;
#X text 144 2940 - play back from a table (non-transposing);
#X obj 36 2964 tabread~;
#X text 144 2964 - non-interpolating table read;
#X obj 36 2988 tabread4~;
#X text 144 2988 - four-point interpolating table read;
#X obj 36 3012 tabosc4~;
#X text 144 3012 - wavetable oscillator;
#X obj 36 3036 tabsend~;
#X text 144 3036 - write one block continuously to a table;
#X obj 36 3060 tabreceive~;
#X text 144 3060 - read one block continuously from a table;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 468 pd oscillators~;
#N canvas 0 22 687 570 filters~ 0;
#X obj 36 3132 vcf~;
#X text 144 3132 - voltage controlled filter;
#X obj 36 3156 noise~;
#X text 144 3156 - white noise generator;
#X obj 36 3180 env~;
#X text 144 3180 - envelope follower;
#X obj 36 3204 hip~;
#X text 144 3204 - high pass filter;
#X obj 36 3228 lop~;
#X text 144 3228 - low pass filter;
#X obj 36 3252 bp~;
#X text 144 3252 - band pass filter;
#X obj 36 3276 biquad~;
#X text 144 3276 - raw filter;
#X obj 36 3300 samphold~;
#X text 144 3300 - sample and hold unit;
#X obj 36 3324 print~;
#X text 144 3324 - print out one or more "blocks";
#X obj 36 3348 rpole~;
#X text 144 3348 - raw real-valued one-pole filter;
#X obj 36 3372 rzero~;
#X text 144 3372 - raw real-valued one-zero filter;
#X obj 36 3396 rzero_rev~;
#X text 144 3396 - time-reversed;
#X obj 36 3420 cpole~;
#X obj 96 3420 czero~;
#X text 240 3420 - corresponding complex-valued filters;
#X obj 156 3420 czero_rev~;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 492 pd filters~;
#N canvas 0 22 500 350 time~ 0;
#X obj 36 3480 delwrite~;
#X text 144 3480 - write to a delay line;
#X obj 36 3504 delread~;
#X text 144 3504 - read from a delay line;
#X obj 36 3528 vd~;
#X text 144 3528 - read from a delay line at a variable delay time;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 444 pd time~;
#N canvas 309 154 587 591 flow 0;
#X obj 36 84 bang;
#X obj 36 108 float;
#X obj 36 132 symbol;
#X obj 36 156 send;
#X obj 36 180 receive;
#X obj 36 228 select;
#X obj 36 252 route;
#X obj 36 276 pack;
#X obj 36 324 unpack;
#X obj 36 348 trigger;
#X obj 36 372 spigot;
#X obj 36 396 moses;
#X obj 36 420 until;
#X obj 36 468 change;
#X obj 36 492 swap;
#X obj 36 204 value;
#X obj 36 540 list;
#X obj 36 444 uzi;
#X obj 36 516 prepend;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 flow (aka glue);
#X text 168 108 Store and recall a number.;
#X text 168 132 Store and recall a symbol.;
#X text 168 156 Send a message to a named object.;
#X text 168 180 Catch sent messages.;
#X text 168 228 Test for matching numbers or symbols.;
#X text 168 252 Route messages according to first element.;
#X text 168 276 Make compound messages.;
#X text 168 324 Get elements of compound messages.;
#X obj 36 300 pak;
#X text 168 300 Alternate version with all the inlets hot.;
#X text 168 348 Convert and trigger from right to left.;
#X text 168 372 Pass or block messages.;
#X f 23;
#X text 168 396 Part a numeric stream.;
#X text 168 420 Bang until stopped.;
#X text 168 444 Bang a given number of times.;
#X text 168 468 Remove repeated numbers from a stream.;
#X text 168 492 Swap two numbers.;
#X text 168 204 Shared numeric value.;
#X text 168 516 Prepend something to make a message.;
#X text 168 540 Manipulate lists.;
#X text 168 84 Output a bang message.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 156 pd flow;
#N canvas 431 311 430 250 subpatch 0;
#N canvas 0 50 450 300 Patch 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 84 pd;
#X obj 36 132 inlet;
#X obj 36 156 outlet;
#X obj 36 180 inlet~;
#X obj 36 204 outlet~;
#X obj 36 108 namecanvas;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 subpatch;
#X text 168 84 Define a subpatch.;
#X text 168 108 Attach a window to it.;
#X text 168 132 Add an inlet.;
#X text 168 156 Add an outlet.;
#X text 168 180 Add a signal inlet.;
#X text 168 204 Add a signal outlet.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 132 pd subpatch;
#N canvas 552 24 454 498 operators 0;
#X obj 36 180 ==;
#X obj 36 204 !=;
#X obj 36 228 >;
#X obj 36 252 <;
#X obj 36 276 >=;
#X obj 36 300 <=;
#X obj 36 108 -;
#X obj 36 132 *;
#X obj 36 156 /;
#X obj 36 84 +;
#X obj 36 420 &;
#X obj 36 324 &&;
#X obj 36 444 |;
#X obj 36 348 ||;
#X obj 36 372 <<;
#X obj 36 396 >>;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 168 84 Addition.;
#X text 168 108 Subtraction.;
#X text 168 132 Multiplication.;
#X text 168 156 Division.;
#X text 168 180 Equality.;
#X text 168 204 Inequality.;
#X text 168 228 Greater than.;
#X text 168 252 Less than.;
#X text 168 276 Greater than or equal to.;
#X text 168 300 Less than or equal to.;
#X text 168 324 Logical AND.;
#X text 168 348 Logical OR.;
#X text 168 372 Bitwise left shift.;
#X text 168 396 Bitwise right shift.;
#X text 168 420 Bitwise AND.;
#X text 168 444 Bitwise OR.;
#X text 24 24 operators;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 204 pd operators;
#N canvas 667 173 480 256 acoustic 0;
#X obj 36 84 mtof;
#X obj 36 108 ftom;
#X obj 36 132 powtodb;
#X obj 36 180 rmstodb;
#X obj 36 156 dbtopow;
#X obj 36 204 dbtorms;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 168 84 MIDI to frequency.;
#X text 168 108 Frequency to MIDI.;
#X text 168 132 Power to decibel.;
#X text 168 156 Decibel to power.;
#X text 168 180 Root mean square to decibel.;
#X text 168 204 Decibel to root mean square.;
#X text 24 24 acoustic;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 228 pd acoustic;
#N canvas 699 278 529 197 text 0;
#X obj 36 84 qlist;
#X obj 36 108 textfile;
#X obj 36 132 text;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 text;
#X text 168 84 Text-based sequencer.;
#X text 168 108 Read and write text (messages) files.;
#X text 168 132 Manipulate texts.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 348 pd text;
#N canvas 748 183 527 426 miscellaneous 0;
#X obj 36 108 loadbang;
#X obj 36 204 netsend;
#X obj 36 228 netreceive;
#X obj 36 252 openpanel;
#X obj 36 276 savepanel;
#X obj 36 324 key;
#X obj 36 348 keyup;
#X obj 36 372 keyname;
#X obj 36 180 freeze;
#X obj 36 300 makefilename;
#X obj 36 84 print;
#X obj 36 132 samplerate;
#X obj 36 156 dspstatus;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 miscellaneous;
#X text 168 84 Print messages to the console.;
#X text 168 108 Bang on load.;
#X text 168 132 Get the audio sample rate.;
#X text 168 156 Get the audio status.;
#X text 168 180 Make a patch unchangeable.;
#X text 168 204 Send messages over the internet.;
#X text 168 228 Listen incoming messages from internet.;
#X text 168 252 Ask for a filename.;
#X text 168 276 Ask for a filename to create.;
#X text 168 300 Make a filename with a variable field.;
#X text 168 324 Grab the keyboard events.;
#X text 168 348 Key release only.;
#X text 168 372 Get the key name and the modifiers.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 372 pd miscellaneous;
#N canvas 347 245 570 445 scalars 0;
#X obj 36 84 struct;
#X obj 36 156 drawcurve;
#X obj 36 180 filledcurve;
#X obj 36 108 drawpolygon;
#X obj 36 132 filledpolygon;
#X obj 36 228 plot;
#X obj 36 204 drawnumber;
#X obj 36 252 pointer;
#X obj 36 276 get;
#X obj 36 300 set;
#X obj 36 324 element;
#X obj 36 348 getsize;
#X obj 36 372 setsize;
#X obj 36 396 append;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 168 84 Declare a template.;
#X text 168 108 Draw a scalar as a polygon.;
#X text 168 132 Draw a scalar as a filled polygon.;
#X text 168 156 Draw a scalar as a curved polygon.;
#X text 168 180 Draw a scalar as a filled curved polygon.;
#X text 168 204 Draw a scalar as text.;
#X text 168 228 Draw an array owned by a scalar.;
#X text 24 24 scalars;
#X text 168 252 Fetch and handle a scalar.;
#X text 168 276 Get values from a scalar.;
#X text 168 300 Set values in a scalar.;
#X text 168 324 Fetch a pointer to an element of an array.;
#X text 168 348 Get the number of elements of an array.;
#X text 168 372 Set the number of elements of an array.;
#X text 168 396 Create a scalar.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 396 pd scalars;
#X coords 0 0 1 1 250 175 0 0 0;
