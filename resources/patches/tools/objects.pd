#N canvas 754 104 527 617 12;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 objects;
#N canvas 550 216 546 349 gui 0;
#X text 360 84 comment;
#X floatatom 36 144 5 0 0 1 - - -;
#X f 5;
#N canvas 0 22 500 350 \$0-array 0;
#X array \$0-array 12 float 1;
#A 0 0 -0.165714 0.245715 0.142858 -0.188571 -0.600001 -0.474286 0.691431 0.760002 0 0 0;
#X coords 0 1 11 -1 250 175 1 0 0;
#X restore 264 132 graph \$0-array;
#X msg 444 84 message;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 GUI;
#X obj 192 156 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X obj 192 192 tgl 15 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000 0 1;
#X obj 144 132 vradio 15 1 0 8 empty empty empty 17 7 0 10 #ffffff #000000 #000000 1;
#X obj 144 84 hradio 15 1 0 8 empty empty empty 0 -7 0 10 #ffffff #000000 #000000 1;
#X obj 108 144 vslider 15 128 0 127 0 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000 0 0;
#X obj 108 288 hslider 128 15 0 127 0 0 empty empty empty 0 -7 0 10 #ffffff #000000 #000000 0 0;
#X obj 36 84 nbx 5 40 0 127 0 1 empty empty empty 0 -7 0 10 #ffffff #000000 #000000 6 127;
#X obj 36 180 vu 15 120 empty empty 17 7 0 10 #ffffff #000000 0 0;
#X connect 1 0 13 0;
#X connect 6 0 7 0;
#X connect 9 0 8 0;
#X connect 10 0 11 0;
#X connect 12 0 1 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 108 pd gui;
#X text 12 72 All the objects contained in this distribution.;
#N canvas 210 40 544 256 time 0;
#X obj 36 84 delay;
#X obj 36 108 metro;
#X obj 36 132 line;
#X obj 36 156 timer;
#X obj 36 180 realtime;
#X obj 36 204 pipe;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 time;
#X text 168 84 Send a message after a time delay.;
#X text 168 108 Send a bang periodically.;
#X text 168 132 Generate ramps.;
#X text 168 156 Measures elapsed logical time.;
#X text 168 180 Measures elapsed real time.;
#X text 168 204 Delay line for numbers (or messages).;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 180 pd time;
#N canvas 271 109 446 617 math 0;
#X obj 36 348 mod;
#X obj 36 324 div;
#X obj 36 84 sin;
#X obj 36 108 cos;
#X obj 36 132 tan;
#X obj 36 156 atan;
#X obj 36 180 atan2;
#X obj 36 252 sqrt;
#X obj 36 204 log;
#X obj 36 228 exp;
#X obj 36 444 abs;
#X obj 36 516 random;
#X obj 36 396 max;
#X obj 36 372 min;
#X obj 36 420 clip;
#X obj 36 276 pow;
#X obj 36 300 %;
#X obj 36 468 wrap;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 math;
#X obj 36 540 expr;
#X text 168 84 Sine.;
#X text 168 108 Cosine.;
#X text 168 132 Tangent.;
#X text 168 156 Arctangent.;
#X text 168 228 Exponential.;
#X text 168 204 Logarithm (natural).;
#X text 168 252 Square root.;
#X text 168 276 Power.;
#X text 168 300 Modulo.;
#X text 168 324 Integer division.;
#X text 168 348 Remainder.;
#X text 168 372 Minimum.;
#X text 168 396 Maximum.;
#X text 168 444 Absolute value.;
#X text 168 468 Fractional part.;
#X obj 36 492 int;
#X text 168 492 Integer part.;
#X text 168 516 Pseudorandom number.;
#X text 168 540 Evaluate math expressions.;
#X text 168 420 Force a number into a range.;
#X text 168 180 Arctangent (alternate).;
#X obj 36 564 vexpr;
#X text 168 564 Evaluate math expressions.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 252 pd math;
#N canvas 162 226 535 571 midi 0;
#X obj 36 84 notein;
#X obj 36 108 ctlin;
#X obj 36 132 pgmin;
#X obj 36 156 bendin;
#X obj 36 180 touchin;
#X obj 36 204 polytouchin;
#X obj 36 252 midiin;
#X obj 36 228 sysexin;
#X obj 36 276 noteout;
#X obj 36 300 ctlout;
#X obj 36 324 pgmout;
#X obj 36 348 bendout;
#X obj 36 372 touchout;
#X obj 36 396 polytouchout;
#X obj 36 420 midiout;
#X obj 36 444 makenote;
#X obj 36 468 stripnote;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 MIDI;
#X text 168 108 Control change in.;
#X text 168 132 Program change in.;
#X text 168 156 Pitch bend in.;
#X text 168 180 Aftertouch in.;
#X text 168 204 Polypressure in.;
#X text 168 252 Incoming raw bytes.;
#X text 168 228 System exclusive in.;
#X text 168 276 Notes out.;
#X text 168 300 Control change out.;
#X text 168 324 Program change out.;
#X text 168 348 Pitch bend out.;
#X text 168 372 Aftertouch out.;
#X text 168 396 Polypressure out.;
#X text 168 420 Broadcast raw bytes.;
#X text 168 444 Send note-on and schedule note-off.;
#X text 168 468 Strip note-off.;
#X text 168 84 Notes in.;
#X obj 36 492 bag;
#X obj 36 516 poly;
#X text 168 492 Maintain a collection of numbers.;
#X text 168 516 Allocate polyphonic voices.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 276 pd midi;
#N canvas 431 249 509 169 osc 0;
#X obj 36 84 oscparse;
#X obj 36 108 oscformat;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 Open Sound Control;
#X text 168 84 Parse OSC packets into messages.;
#X text 168 108 Convert message to OSC packets.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 300 pd osc;
#N canvas 256 437 576 231 array 0;
#X obj 36 84 tabread;
#X obj 36 108 tabread4;
#X obj 36 132 tabwrite;
#X obj 36 180 soundfiler;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 array;
#X text 168 84 Read numbers from an array.;
#X text 168 108 Alternate with 4-point interpolation.;
#X text 168 132 Write numbers to an array.;
#X obj 36 156 array;
#X text 168 156 Manipulate arrays.;
#X text 168 180 Read and write soundfiles from and to arrays.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 324 pd array;
#N canvas 361 126 468 470 math~ 0;
#X obj 36 372 clip~;
#X obj 36 420 wrap~;
#X obj 36 324 min~;
#X obj 36 348 max~;
#X obj 36 84 +~;
#X obj 36 108 -~;
#X obj 36 132 *~;
#X obj 36 156 /~;
#X obj 36 300 pow~;
#X obj 36 204 log~;
#X obj 36 228 exp~;
#X obj 36 396 abs~;
#X obj 36 252 sqrt~;
#X obj 36 180 cos~;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 math~;
#X obj 36 276 rsqrt~;
#X text 168 276 Inverse square root.;
#X text 168 180 Cosine.;
#X text 168 228 Exponential.;
#X text 168 204 Logarithm (natural).;
#X text 168 252 Square root.;
#X text 168 300 Power.;
#X text 168 324 Minimum.;
#X text 168 348 Maximum.;
#X text 168 396 Absolute value.;
#X text 168 420 Fractional part.;
#X text 168 372 Force a number into a range.;
#X text 168 84 Addition.;
#X text 168 108 Subtraction.;
#X text 168 132 Multiplication.;
#X text 168 156 Division.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 468 pd math~;
#N canvas 98 373 473 379 filters~ 0;
#X obj 36 84 vcf~;
#X obj 36 108 hip~;
#X obj 36 132 lop~;
#X obj 36 156 bp~;
#X obj 36 180 biquad~;
#X obj 36 204 rpole~;
#X obj 36 228 rzero~;
#X obj 36 252 rzero_rev~;
#X obj 36 276 cpole~;
#X obj 36 300 czero~;
#X obj 36 324 czero_rev~;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 filters~;
#X text 168 84 Voltage controlled.;
#X text 168 108 High-pass.;
#X text 168 132 Low-pass.;
#X text 168 156 Band-pass.;
#X text 168 180 Two-Pole Two-Zero.;
#X text 168 204 Real One-Pole.;
#X text 168 228 Real One-Zero.;
#X text 168 252 Real "reverse" One-Zero.;
#X text 168 276 Complex One-Pole.;
#X text 168 300 Complex One-Zero.;
#X text 168 324 Complex "reverse" One-Zero.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 540 pd filters~;
#N canvas 125 142 558 609 flow 0;
#X obj 36 84 bang;
#X obj 36 108 float;
#X obj 36 132 symbol;
#X obj 36 156 send;
#X obj 36 180 receive;
#X obj 36 228 select;
#X obj 36 252 route;
#X obj 36 276 pack;
#X obj 36 324 unpack;
#X obj 36 348 trigger;
#X obj 36 372 spigot;
#X obj 36 396 moses;
#X obj 36 420 until;
#X obj 36 468 change;
#X obj 36 492 swap;
#X obj 36 204 value;
#X obj 36 540 list;
#X obj 36 444 uzi;
#X obj 36 516 prepend;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 flow (aka glue);
#X text 168 108 Store and recall a number.;
#X text 168 132 Store and recall a symbol.;
#X text 168 156 Send a message to a named object.;
#X text 168 180 Catch sent messages.;
#X text 168 228 Test for matching numbers or symbols.;
#X text 168 252 Route messages according to first element.;
#X text 168 276 Make compound messages.;
#X text 168 324 Get elements of compound messages.;
#X obj 36 300 pak;
#X text 168 300 Alternate version with all the inlets hot.;
#X text 168 348 Convert and trigger from right to left.;
#X text 168 372 Pass or block messages.;
#X f 23;
#X text 168 396 Part a numeric stream.;
#X text 168 420 Bang until stopped.;
#X text 168 444 Bang a given number of times.;
#X text 168 468 Remove repeated numbers from a stream.;
#X text 168 492 Swap two numbers.;
#X text 168 204 Shared numeric value.;
#X text 168 516 Prepend something to make a message.;
#X text 168 540 Manipulate lists.;
#X text 168 84 Output a bang message.;
#X obj 36 564 counter;
#X text 168 564 Count bangs received.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 156 pd flow;
#N canvas 431 311 430 250 subpatch 0;
#N canvas 0 50 450 300 Patch 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 84 pd;
#X obj 36 132 inlet;
#X obj 36 156 outlet;
#X obj 36 180 inlet~;
#X obj 36 204 outlet~;
#X obj 36 108 namecanvas;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 subpatch;
#X text 168 84 Define a subpatch.;
#X text 168 132 Add an inlet.;
#X text 168 156 Add an outlet.;
#X text 168 180 Add a signal inlet.;
#X text 168 204 Add a signal outlet.;
#X text 168 108 Attach a patch to a name.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 132 pd subpatch;
#N canvas 552 24 454 498 operators 0;
#X obj 36 180 ==;
#X obj 36 204 !=;
#X obj 36 228 >;
#X obj 36 252 <;
#X obj 36 276 >=;
#X obj 36 300 <=;
#X obj 36 108 -;
#X obj 36 132 *;
#X obj 36 156 /;
#X obj 36 84 +;
#X obj 36 420 &;
#X obj 36 324 &&;
#X obj 36 444 |;
#X obj 36 348 ||;
#X obj 36 372 <<;
#X obj 36 396 >>;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 168 84 Addition.;
#X text 168 108 Subtraction.;
#X text 168 132 Multiplication.;
#X text 168 156 Division.;
#X text 168 180 Equality.;
#X text 168 204 Inequality.;
#X text 168 228 Greater than.;
#X text 168 252 Less than.;
#X text 168 276 Greater than or equal to.;
#X text 168 300 Less than or equal to.;
#X text 168 324 Logical AND.;
#X text 168 348 Logical OR.;
#X text 168 372 Bitwise left shift.;
#X text 168 396 Bitwise right shift.;
#X text 168 420 Bitwise AND.;
#X text 168 444 Bitwise OR.;
#X text 24 24 operators;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 204 pd operators;
#N canvas 823 319 466 251 acoustic 0;
#X obj 36 84 mtof;
#X obj 36 108 ftom;
#X obj 36 132 powtodb;
#X obj 36 156 dbtopow;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 168 84 MIDI to frequency.;
#X text 168 108 Frequency to MIDI.;
#X text 168 132 Power to decibel.;
#X text 168 156 Decibel to power.;
#X text 24 24 acoustic;
#X obj 36 204 dbtoamp;
#X text 168 180 Amplitude to decibel.;
#X text 168 204 Decibel to amplitude.;
#X obj 36 180 amptodb;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 228 pd acoustic;
#N canvas 699 278 509 192 text 0;
#X obj 36 84 qlist;
#X obj 36 108 textfile;
#X obj 36 132 text;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 text;
#X text 168 84 Text-based sequencer.;
#X text 168 108 Read and write text (messages) files.;
#X text 168 132 Manipulate texts.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 348 pd text;
#N canvas 316 61 531 477 miscellaneous 0;
#X obj 36 108 loadbang;
#X obj 36 252 netsend;
#X obj 36 276 netreceive;
#X obj 36 300 openpanel;
#X obj 36 324 savepanel;
#X obj 36 372 key;
#X obj 36 396 keyup;
#X obj 36 420 keyname;
#X obj 36 228 freeze;
#X obj 36 348 makefilename;
#X obj 36 84 print;
#X obj 36 132 samplerate;
#X obj 36 156 dspstatus;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 miscellaneous;
#X text 168 84 Print messages to the console.;
#X text 168 108 Bang on load.;
#X text 168 132 Get the audio sample rate.;
#X text 168 156 Get the audio status.;
#X text 168 228 Make a patch unchangeable.;
#X text 168 252 Send messages over the internet.;
#X text 168 276 Listen incoming messages from internet.;
#X text 168 300 Ask for a filename.;
#X text 168 324 Ask for a filename to create.;
#X text 168 372 Grab the keyboard events.;
#X text 168 396 Key release only.;
#X text 168 420 Get the key name and the modifiers.;
#X obj 36 204 arguments;
#X text 168 204 Fetch arguments of an abstraction.;
#X text 168 348 Make a symbol with a variable field.;
#X obj 36 180 title;
#X text 168 180 Get the patch name.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 372 pd miscellaneous;
#N canvas 347 245 570 445 scalars 0;
#X obj 36 84 struct;
#X obj 36 156 drawcurve;
#X obj 36 180 filledcurve;
#X obj 36 108 drawpolygon;
#X obj 36 132 filledpolygon;
#X obj 36 228 plot;
#X obj 36 204 drawnumber;
#X obj 36 252 pointer;
#X obj 36 276 get;
#X obj 36 300 set;
#X obj 36 324 element;
#X obj 36 348 getsize;
#X obj 36 372 setsize;
#X obj 36 396 append;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 168 84 Declare a template.;
#X text 168 108 Draw a scalar as a polygon.;
#X text 168 132 Draw a scalar as a filled polygon.;
#X text 168 156 Draw a scalar as a curved polygon.;
#X text 168 180 Draw a scalar as a filled curved polygon.;
#X text 168 204 Draw a scalar as text.;
#X text 168 228 Draw an array owned by a scalar.;
#X text 24 24 scalars;
#X text 168 252 Fetch and handle a scalar.;
#X text 168 276 Get values from a scalar.;
#X text 168 300 Set values in a scalar.;
#X text 168 324 Fetch a pointer to an element of an array.;
#X text 168 348 Get the number of elements of an array.;
#X text 168 372 Set the number of elements of an array.;
#X text 168 396 Create a scalar.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 396 pd scalars;
#N canvas 336 278 510 185 delay~ 0;
#X obj 36 84 delwrite~;
#X obj 36 108 delread~;
#X obj 36 132 vd~;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 delay~;
#X text 168 84 Write to a delay line.;
#X text 168 108 Read from a delay line.;
#X text 168 132 Read from a variable delay line.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 516 pd delay~;
#N canvas 376 245 578 360 generators~ 0;
#X obj 36 84 phasor~;
#X obj 36 108 osc~;
#X obj 36 156 tabwrite~;
#X obj 36 180 tabplay~;
#X obj 36 204 tabread~;
#X obj 36 228 tabread4~;
#X obj 36 252 tabosc4~;
#X obj 36 276 tabsend~;
#X obj 36 300 tabreceive~;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 generators~;
#X text 180 84 Sawtooth oscillator.;
#X text 180 108 Cosine oscillator.;
#X text 180 156 Write to an array.;
#X text 180 180 Play back from an array.;
#X text 180 204 Non-interpolating array lookup.;
#X text 180 228 4-point-interpolating array lookup.;
#X text 180 252 4-point interpolating oscillator.;
#X text 180 276 Writes one block continuously to an array.;
#X text 180 300 Read one block continuously from an array.;
#X obj 36 132 noise~;
#X text 180 132 Noise generator.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 420 pd generators~;
#N canvas 207 181 579 567 miscellaneous~ 0;
#X obj 36 84 dac~;
#X obj 36 108 adc~;
#X obj 36 132 sig~;
#X obj 36 156 line~;
#X obj 36 180 vline~;
#X obj 36 228 snapshot~;
#X obj 36 324 bang~;
#X obj 36 348 send~;
#X obj 36 372 receive~;
#X obj 36 396 throw~;
#X obj 36 420 catch~;
#X obj 36 444 block~;
#X obj 36 468 switch~;
#X obj 36 492 readsf~;
#X obj 36 516 writesf~;
#X obj 36 204 threshold~;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 168 84 Audio output.;
#X text 168 108 Audio input.;
#X text 168 204 Detect signal thresholds.;
#X text 168 228 Convert a signal to a number.;
#X text 168 324 Bang after each DSP block.;
#X text 168 348 One-to-many nonlocal signal connections.;
#X text 168 372 Fetch the signal sent.;
#X text 168 396 Many-to-one summing bus.;
#X text 168 420 Read a summing bus.;
#X text 168 444 Modify the block size in a subpatch.;
#X text 168 468 Switch DSP computation on and off.;
#X text 168 492 Read a soundfile.;
#X text 168 516 Write streaming audio to disk.;
#X obj 36 252 env~;
#X text 168 252 Envelope follower.;
#X obj 36 276 samphold~;
#X obj 36 300 print~;
#X text 168 276 Sample and hold unit.;
#X text 24 24 miscellaneous~;
#X text 168 300 Print out raw values to the console.;
#X text 168 156 Generate audio ramp.;
#X text 168 180 Generate high-precision audio ramp.;
#X text 168 132 Convert a number to a signal.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 564 pd miscellaneous~;
#N canvas 487 196 448 217 acoustic~ 0;
#X obj 36 84 mtof~;
#X obj 36 108 ftom~;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 acoustic~;
#X text 180 84 MIDI to frequency.;
#X text 180 108 Frequency to MIDI.;
#X text 180 132 Amplitude to decibel.;
#X text 180 156 Decibel to amplitude.;
#X obj 36 156 dbtoamp~;
#X obj 36 132 amptodb~;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 444 pd acoustic~;
#N canvas 344 209 657 239 fft~ 0;
#X obj 36 84 fft~;
#X obj 36 108 ifft~;
#X obj 36 132 rfft~;
#X obj 36 156 rifft~;
#X obj 36 180 framp~;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X text 24 24 fft~;
#X text 168 84 Complex DFT (Discrete Fourier Transform).;
#X text 168 108 Inverse of Complex DFT (Discrete Fourier Transform).;
#X text 168 132 Real DFT (Discrete Fourier Transform).;
#X text 168 156 Inverse of Real DFT (Discrete Fourier Transform).;
#X text 168 180 Estimate frequency and amplitude of FFT components.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 492 pd fft~;
#X coords 0 0 1 1 250 175 0 0 0;
