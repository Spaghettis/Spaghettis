#N struct widget float x float y float z float q;
#N canvas 349 30 1142 783 12;
#N canvas 122 384 319 208 data 1;
#X scalar widget 50 100 30 0 \;;
#X scalar widget 200 100 -30 800 \;;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 108 pd data;
#X text 588 144 The positions \, border color \, and altitude of each triangle are numeric values which can control \, or be controlled by \, other elements of the patch.;
#X text 588 192 When the data window is locked (not in edit mode) you can drag the apex of either triangle up or down to change the altitude (you should see the cursor change with dragging is meaningful.) In edit (unlocked) mode \, you can move teh entire triangles around \, or cut \, copy \, and paste them.;
#X text 588 348 Data is not persistent. If you save a Pd patch and reopen it \, the "data" isn't preserved.;
#X text 600 264 Scalars are described by "templates" \, which are subwindows. The subwindows are found by their name \, in this case "template1." The template describes what form the data take and how it is shown. It's possible to mix data of many different templates in the same collection.;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X obj -60 12 freeze;
#X text 24 24 scalars;
#N canvas 465 215 462 264 template 0;
#X obj 36 144 filledpolygon q q 3 0 0 20 z 40 0;
#X f 33;
#X obj 36 192 struct widget float x float y float z float q;
#X obj 36 108 tgl 15 1 empty empty empty 17 7 0 10 #ffffff #000000 #000000 1 1;
#X obj 36 72 drawnumber z 50 -8 q;
#X obj 36 36 tgl 15 1 empty empty empty 17 7 0 10 #ffffff #000000 #000000 1 1;
#X connect 2 0 0 0;
#X connect 4 0 3 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 180 pd template;
#N canvas 547 272 251 213 init 0;
#X msg 84 96 \; pd-data clear;
#X obj 24 24 inlet;
#X obj 24 60 t b b;
#N canvas 805 192 507 291 scalars 0;
#X obj 300 168 pointer;
#X msg 300 132 traverse data \, bang;
#X obj 36 60 t b b;
#X obj 36 24 inlet;
#X obj 36 228 append widget x y z q;
#X msg 36 168 50 100 30 0 \, 200 100 -30 800;
#X connect 0 0 4 4;
#X connect 1 0 0 0;
#X connect 2 0 5 0;
#X connect 2 1 1 0;
#X connect 3 0 2 0;
#X connect 5 0 4 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 24 156 pd scalars;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 2 1 0 0;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 36 288 pd init;
#X obj 36 252 bng 15 250 50 0 empty empty empty 17 7 0 10 #ffffff #000000 #000000;
#X text 540 504 The filledpolygon's arguments are interior color \, border color \, border width \, and then the points of the polygon. Arguments which are symbols ("q" and "z" in this case) mean to take the values from the data structure. Other values are constant. The position of the object is automatically controlled by fields named "x" and "y".;
#X text 540 408 This subpatch acts as a template which describes the data structure. The "struct" specifies four floating point values named x \, y \, z \, and q. The "filledpolygon" is a drawing instruction. Templates should have only one template object but may have any number of drawing instructions.;
#X text 12 72 A simple patch with two scalars inside.;
#X text 12 144 Define the template (and appearance) of those scalars.;
#X f 55;
#X text 12 216 Create the two scalars (instances of the template).;
#X connect 10 0 9 0;
#X coords 0 0 1 1 250 175 0 0 0;
