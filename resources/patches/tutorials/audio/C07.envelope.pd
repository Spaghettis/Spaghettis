#N canvas 313 22 839 851 12;
#X obj 102 297 dbtorms;
#X obj 23 293 osc~ 440;
#X obj 23 339 env~;
#X floatatom 78 329 0 0 0 0 - - -;
#X floatatom 102 274 0 0 0 0 - - -;
#X obj 119 380 t b f;
#X floatatom 119 403 0 0 0 0 - - -;
#X obj 126 458 pack;
#X obj 126 481 route 0 1;
#X obj 126 504 > 55;
#X obj 176 504 < 45;
#X obj 126 527 sel 1;
#X obj 176 527 sel 1;
#X msg 90 538 1;
#X msg 90 516 0;
#X obj 126 564 print attack;
#X obj 119 435 != 0;
#X obj 24 612 t b f;
#X floatatom 15 638 0 0 0 0 - - -;
#X obj 27 688 pack;
#X obj 27 711 route 0 1;
#X obj 27 749 sel 1;
#X msg 6 856 1;
#X msg 7 879 0;
#X obj 20 666 != 0;
#X obj 58 639 < 45;
#X obj 31 783 timer;
#X obj 113 712 sel 0;
#X obj 95 832 sel 0;
#X obj 45 832 sel 1;
#X obj 45 873 print rest;
#X obj 31 806 > 1000;
#X text 162 403 state -- 1 if waiting for low threshold \,;
#X text 199 418 0 if we've attained it and now want the;
#X text 202 434 high one.;
#X text 209 480 route the RMS value according to state;
#X text 239 506 if off \, 55 dB means attack. If on \, 45;
#X text 240 527 dB or less means state changes to off.;
#X text 132 359 ATTACK DETECTION;
#X text 40 594 REST DETECTION;
#X text 100 637 Here we always will test RMS against a low value;
#X text 125 654 but as before we route the result according to;
#X text 147 671 our state \, 1 if "resting" \, 0 if not.;
#X text 163 709 regardless of state \, when RMS isn't low;
#X text 185 724 reset the timer;
#X text 202 846 RMS isn't low enough.;
#X text 120 744 If we're not in rest \, and the RMS is low \,;
#X text 143 761 check elapsed time sinse RMS last wasn't low.;
#X text 122 802 If more than 1 second \, report a rest.;
#X text 170 828 If we're at rest \, pop out of it when;
#X text 109 320 note 3.01 dB difference between;
#X text 113 336 peak and RMS amplitudes.;
#X obj 23 316 *~;
#N canvas 645 235 662 340 more 0;
#X text 24 24 The env~ object reports ths RMS signal level over the last 256 samples (by default) or any other power of 2 that's at least twice the block size. The analysis is done in an overlapped fashion so that results appear every N/2 points if N is the analysis window size. So the larger the window \, the stabler the result and the less frequently it appears. Computation time doesn't depend heavily on N.;
#X text 24 144 Envelope followers are frequently used to detect attacks and periods of silence. (There are fancier attack detectors out there \, though.) Here is a simple threshold-based attack and rest detector.;
#X text 24 216 Both detectors are state machines with two states \, on and off. If on \, a test is run to determine whether to turn off \, and vice versa. The tests are run at each output of the rms~ object.;
#X coords 0 0 1 1 250 175 0 0 0;
#X restore 588 120 pd more;
#X obj 12 12 cnv 15 250 45 empty empty empty 0 -7 0 10 #cccccc #000000;
#X obj -60 12 freeze;
#X text 24 24 envelope;
#X text 12 72 Envelope follower.;
#X connect 0 0 52 1;
#X connect 1 0 52 0;
#X connect 2 0 3 0;
#X connect 2 0 5 0;
#X connect 2 0 17 0;
#X connect 4 0 0 0;
#X connect 5 0 6 0;
#X connect 5 1 7 1;
#X connect 6 0 16 0;
#X connect 7 0 8 0;
#X connect 8 0 9 0;
#X connect 8 1 10 0;
#X connect 9 0 11 0;
#X connect 10 0 12 0;
#X connect 11 0 13 0;
#X connect 11 0 15 0;
#X connect 12 0 14 0;
#X connect 13 0 6 0;
#X connect 14 0 6 0;
#X connect 16 0 7 0;
#X connect 17 0 18 0;
#X connect 17 1 25 0;
#X connect 18 0 24 0;
#X connect 19 0 20 0;
#X connect 20 0 21 0;
#X connect 20 1 28 0;
#X connect 21 0 26 1;
#X connect 22 0 18 0;
#X connect 23 0 18 0;
#X connect 24 0 19 0;
#X connect 25 0 19 1;
#X connect 25 0 27 0;
#X connect 26 0 31 0;
#X connect 27 0 26 0;
#X connect 28 0 23 0;
#X connect 29 0 22 0;
#X connect 29 0 30 0;
#X connect 31 0 29 0;
#X connect 52 0 2 0;
#X coords 0 0 1 1 250 175 0 0 0;
