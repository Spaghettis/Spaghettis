#! /usr/bin/env bash

# ------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------

[ "${BASH_VERSION%.*}" \> "3.1" ] || { echo >&2 "${0##*/}: Bash 3.1 or higher only";    exit 1; }

# ------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------

# Script must be executed at the same level.

rep=$(pwd)

[ "${0%/*}" = "." ] || { echo >&2 "${0##*/}: Must be executed at the same level";       exit 1; }

# ------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------

# Test dependencies ( http://stackoverflow.com/a/22592801 ).

hasTk=$(dpkg-query   -W -f='${Status}' tk8.6 2>/dev/null              | grep -c "ok installed")
hasTcl=$(dpkg-query  -W -f='${Status}' tcl8.6 2>/dev/null             | grep -c "ok installed")
hasAlsa=$(dpkg-query -W -f='${Status}' libasound2-dev 2>/dev/null     | grep -c "ok installed")
hasJack=$(dpkg-query -W -f='${Status}' libjack-jackd2-dev 2>/dev/null | grep -c "ok installed")

[ ${hasTk}   -eq 1 ] || { echo >&2 "${0##*/}: tk8.6 package required";                  exit 1; }
[ ${hasTcl}  -eq 1 ] || { echo >&2 "${0##*/}: tcl8.6 package required";                 exit 1; }
[ ${hasAlsa} -eq 1 ] || { echo >&2 "${0##*/}: libasound2-dev package required";         exit 1; }
[ ${hasJack} -eq 1 ] || { echo >&2 "${0##*/}: libjack-jackd2-dev package required";     exit 1; }

# ------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------

# Paths.

destination="${rep}/build"
bin="${rep}/bin"
tcl="${rep}/tcl"
help="${rep}/resources/help"

# ------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------

# Do not overwrite previous build.

[ -e "${destination}" ] && { echo >&2 "${0##*/}: ${destination} already exist"; exit 1; }

# ------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------

# Build the binaries.

if [ -n "${PD_OPTIONS}" ]; then
    echo "Build ${PD_OPTIONS} ..."
else
    echo "Build ..."
fi

cd "${rep}/src"                                                     || exit 1
make -f makefile.linux                                              || exit 1
cd "${rep}"                                                         || exit 1

# ------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------

# Create the directory.

echo "Create directory ..."
mkdir "${destination}"                                              || exit 1
cp -R "${bin}" "${destination}"                                     || exit 1
cp -R "${tcl}" "${destination}"                                     || exit 1
cp -R "${help}" "${destination}"                                    || exit 1

# ------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------

# Clean the build.

echo "Clean ..."
cd "${rep}/src"                                                     || exit 1
make -f makefile.linux clean                                        || exit 1
cd "${rep}"                                                         || exit 1

# ------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------

# End.

echo "SUCCEEDED"

# ------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------
